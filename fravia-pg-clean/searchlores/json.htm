<html>  
<head>  
<title>JSON for the masses</title>  
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">  
<meta http-equiv=Content-Style-Type content=text/css>  
<meta content="Learn how to use Yahoo! JSON APIs and Yahoo! pipes to build powerful research tools." name=description>  
<META content="Yahoo!, JSON, API, search APIs, Yahoo pipes, javascript, callback function, dynamic script tag, tutorial, security" name=keywords>  
<META content=Nemo name=author>  
<META content="Copyright(c) 2007 Nemo" name=copyright>
<script type="text/javascript">
<!--
function get_time() {
    var script=document.createElement('script');
    script.src="http://developer.yahooapis.com/TimeService/V1/getTime?appid=";
    script.src+="YahooDemo&output=json&callback=YahooTime&rnd=" + Math.random();
    script.type="text/javascript";
    document.getElementsByTagName('head')[0].appendChild(script);
}
function YahooTime(json) {
    theDate= new Date(json.Result.Timestamp * 1000);
    alert("Time: " + theDate.toGMTString());
}
//-->
</script>
<style type=text/css> #obmessage a:link {COLOR: #02f}  
     a:visited {COLOR: #808}  
     a:hover {BACKGROUND: #afb; COLOR: purple}  
     ul, ol, li, blockquote {text-align: justify;}  
</style>  
</head>  
<body text=#001010 vLink=#3366cc aLink=#00ff00 link=#0000ff bgColor=#cccccc>  
<center>  
<img src="images/left.gif" align=left alt="~">
<img src="images/right.gif" align=right alt="~">
<h1 align=center>JSON for the masses</h1>  
<p>  
<i>Ask, and it shall be given you; seek, and ye shall find; knock, and it shall be opened unto you.</i>  
</p> 
<p>&nbsp;</p>
<table border=0 cellspacing=0 cellpadding=0 align=left>
<tr><td width=250> 
<img src="images/jason.jpg" width=250 height=353 align=left alt="Jason and the golden fleece.">
</td><td>&nbsp;</td></tr>
</table>
<table align=center border=0>  
<tr>  
<td bgColor=#993300>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>  
<td bgColor=#993300>&nbsp;&nbsp;</td>  
<td bgColor=#993300><a href="essays.htm" ><img height=68 alt="to essays" hspace=0 src="images/basipet.jpg" width=118 align=bottom border=0></a></td>  
<td bgColor=#993300>&nbsp;&nbsp;</td>  
</tr>  
</table>  
<p>  
<b>First published @ <a target="_blank" href="http://www.searchlores.org/">Searchlores</a> in <font  
color=blue>June 2007</font> | Version <font color=blue>0.01</font> | By  
<font color=blue>Nemo</font></b>
</p> 
<p>&nbsp;</p>
<p align=justify>
Although search engines often have the data you want, that very same data is not presented in the way you need. For instance search engines show a snapshot of each document on search results, but do not show frequency data about words appearing on those snapshots. In some cases engines' search syntax is not sufficiently versatile. For instance
you do not have a way of excluding dynamic documents (those having a '?' in the URL) or of sorting search results by date to see who was the first to have a given idea, even if last modified date is shown on search results... Post processing search results may save the day by presenting / sifting them in a more adequate way. In other cases the information you want is scattered among several services and you need to combine them to do your research.</p>
<p align=justify>Thanks to Yahoo! APIs, which offer JSON access with a callback function, and Yahoo! pipes, which offer JSON access with a callback function and can interface with foreign APIs, you can do these tasks browser side using javascript and share those script with others.</p> 
<table align=center>  
<tr><td>  
<hr>  
<img height=13 alt=¤ src="images/bulletr.gif" width=13>
<a href="json.htm#introduction">Introduction</a>
<img height=13 alt=¤ src="images/bulletr.gif" width=13>
<a href="json.htm#hello">Hello World!</a>  
<img height=13 alt=¤ src="images/bulletr.gif" width=13>
<a href="json.htm#example">Example</a>   
<img height=13 alt=¤ src="images/bulletr.gif" width=13>
<a href="json.htm#security">Security</a>   
<img height=13 alt=¤ src="images/bulletr.gif" width=13>   
<hr>  
</td></tr>  
</table>   
</center>
<div style="clear:both;"></div>
<a name=introduction></a><h2>Introduction</h2>
<p align=justify>
With the advent of web 2.0, more and more sites offer APIs (Application Programming Interface) to access some services. Those services range from plain vanilla RSS feeds (a sortof of live bookmarks, which sites update when they have new content and recent browsers automatically check) to more sophisticated ones such as Google or Yahoo! APIs. Until the end of 2005 all but one of those APIs (<a href=http://del.icio.us/help/json/>del.icio.us</a>, bought by Yahoo!) required a server side proxy due to <a href="http://en.wikipedia.org/wiki/XMLHttpRequest">XMLHTTPRequest</a>' cross domain hassles, but everything have changed, because Yahoo! now offers JSON (JavaScript Object Notation) access to its APIs and all you need is a not too old javascript enabled browser (IE 5.01+, Netscape 7.2+, Opera 7.54+, Firefox 1.06+ or Safari 1.3+). 
</p>
<a name=hello></a><h2>Hello World!</h2>
<p align="justify">Lets see an easy example to get started on JSON wizardry. The main ingredients to do the magic are the following:
</p>
<ul>
<li>Javascript from different domains can be embedded on a web page and run in the context of that page by using a script tag
<blockquote>
<tt>&lt;script type="text/javascript" src="http://differentsite.com/script.js"&gt;&lt;/script&gt;</tt>
</blockquote>
<li>The script tag can also be inserted dynamically using javascript
<blockquote>
<pre>
var script=document.createElement('script');
script.src=url;
script.type="text/javascript";
document.getElementsByTagName('head')[0].appendChild(script);
</pre>
</blockquote>
which means that the url can be used to encode some actions previously taken by the user. In our example we will use Yahoo's <a href="http://developer.yahoo.com/search/web/V1/webSearch.html">web</a> and <a href="http://developer.yahoo.com/search/image/V1/imageSearch.html">image</a> search <a href="http://developer.yahoo.com/search/">APIs</a> to encode those actions.
<li>Data can be transfered from servers to browsers using <a href="http://www.hunlock.com/blogs/Mastering_JSON_%28_JavaScript_Object_Notation_%29">JSON</a>, a <a href="http://simonwillison.net/2006/Dec/20/json/">fat free</a> alternative to XML, which is natively supported by javascript. To see an easy example of a JSON output, lets use <a href="http://developer.yahoo.com/util/timeservice/V1/getTime.html">Yahoo's Time Service API</a> to get the current time. To do that, click in the following link:
<blockquote>
<a href="http://developer.yahooapis.com/TimeService/V1/getTime?appid=YahooDemo&amp;output=json"><tt>http://developer.yahooapis.com/TimeService/V1/getTime?appid=YahooDemo&amp;output=json</tt></a>
</blockquote>
<li>To handle the data sent by the server, we need a way of knowing when it has arrived. The use of <a href="http://www.phpied.com/javascript-include-ready-onload/">event handlers</a>
to handle the situation is unsatisfactory, because it is not cross
browser compatible. Fortunately there's a cunning way of getting the
job done, the trick consists in the server sending a <a href="http://developer.yahoo.com/common/json.html#callbackparam">callback function</a>, which will be executed when the script is loaded. Here's a very simple working example.
<blockquote>
<pre>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Yahoo Time&lt;/title&gt;
&lt;script type="text/javascript"&gt;
  function get_time() {
    var script=document.createElement('script');
    script.src="http://developer.yahooapis.com/TimeService/V1/getTime?appid=";
    script.src+="YahooDemo&amp;output=json&amp;callback=YahooTime&amp;rnd=" + Math.random();
    script.type="text/javascript";
    document.getElementsByTagName('head')[0].appendChild(script);
  }
  function YahooTime(json) {
    theDate= new Date(json.Result.Timestamp * 1000);
    alert("Time: " + theDate.toGMTString());
  }
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;input type="submit" value="Get Time" onclick="get_time()"&gt;;
&lt;/body&gt;
&lt;/html&gt;
</pre>
</blockquote>
To see it in action, click in the following button: &nbsp; <input type="submit" value="Get Time" onclick="get_time()" style="display: inline;"> <font color="red">WARNING:</font> it will not work, if you have javascript disabled. The <tt>&amp;rnd=" + Math.random();</tt>
is a workaround for IE and Opera which cache the script, when script's
url doesn't change (Yahoo ignores unknown variables). Usually script
caching is not a problem, unless on those rare cases where the url
remains the same, but script's content changes during browser's
session.
<li>There are several services around the web which offer data and
APIs to access that data in formats such as XML and RSS or Atom feeds,
but without JSON and a callback function, that data can't be handled
browser side due to javascript's cross-domain security restrictions to <a href="http://en.wikipedia.org/wiki/XMLHttpRequest">XMLHTTPRequest</a>. Fortunately Yahoo offers a <a href="http://pipes.yahoo.com/pipes/">solution</a> through the use of <a href="http://www.wackyb.co.nz/yahoo/pipes/">pipes</a>, which lets you <a href="http://blogfresh.blogspot.com/2007/03/pipes-json-and-code-for-your-website.html">translate</a> XML and Atom or RSS feeds into JSON format plus a callback function. 
</ul>
<a name=example></a><h2>Example</h2>
<p align="justify">
With the previous ingredients we can build our tool [<a href="oracle.htm">Seekers' Oracle</a>], which add two tricks: multiple calls to Yahoo!'s JSON APIs and the remotion of unneeded script tags as we do not want to push memory limits of browsers due to continual use. What this tool do is building a list of words appearing in search results, be it web or images search results, by consulting Yahoo!'s <a href=http://developer.yahoo.com/search/web/V1/webSearch.html>web</a> and <a href=http://developer.yahoo.com/search/image/V1/imageSearch.html>image</a> search APIs (in the later case, what images search API is showing you is an image's thumbnail and text from points 1, 3 and 4 as explained <a href="alltheweb.htm#intermediate">here</a>). For those interested in knowing how the tool was made, use
viewsource; for the others, just use it.
</p>
<p align=justify>
The purpose of this tool is twofold:
</p>
<ol>
<li>Getting the list of most frequent and unrelated keywords clinging to your search terms. To use the tool in this mode, enter your keywords, one by one. To learn what to do with this, consult my essays <a href="nemo_SEO.htm">Search Engines Anti-Optimization</a> and <a href="alltheweb.htm">Yahoo!/AllTheWeb's image search syntax</a> to see examples of how you can easily write powerful queries to quickly get what you want.
<li>Giving a context to your search query. To use the tool on this mode, enter two related keywords and you'll get a list with an hight density of keywords from your context. To learn what to do with this, see my essay <a href="alltheweb.htm">Yahoo!/AllTheWeb's image search syntax</a>. 
</ol>
<a name=security></a><h2>Security</h2>
<p><b>Patient:</b> <i>Doctor, it hurts when I do this way...</i><br>
<b>Doctor:</b> <i>Then, don't do that way!</i></p>
<p align=justify>
JSON and the dynamic script tag have been bad mouthed for its <a href=http://en.wikipedia.org/wiki/Json#Security_issues>security issues</a>, but those problems are easy to handle:
<ul>
<li>If you are hosting the page which calls a JSON API, put it on a sub domain if you have cookies to protect (browsers' sandbox model will take care of that issue) and <b>do not</b> put sensitive information on that page, because javascript have access to the DOM.
<li>If you want to offer / use JSON <b>only</b> on you site and <b>if</b> the information you want to transfer is <b>not sensitive</b>, use the <a href=http://jpsykes.com/47/practical-csrf-and-json-security>double submitting cookies strategy</a>.
</ul>
<p>&nbsp;</p>
</p>
<p align="justify">
(c) Nemo 2007 &nbsp;&nbsp; <font color="#0022ff">nemo vitam meam regit@yahoo.com</font> &nbsp;&nbsp; replace white spaces by underscores.
</p>
<center>  
<hr width="66%">  
<a target="_blank" href="basic.htm"><img alt="Petit image" src="images/basipet.jpg" align="bottom" border="0" height="68" hspace="0" width="118"></a><br>
<br>
  
<table>
  
  <tbody>
    <tr>
      <td bgcolor="#993300" height="2" width="300"></td>
    </tr>
  
  </tbody>
</table>
  
(c) III Millennium: <font color="blue">[</font><a target="_blank" href="http://www.searclores.org/info.htm">fravia+</a><font color="blue">]</font>, all rights reserved, reversed, reviled and  
revealed  
</center>
</body>
</html>