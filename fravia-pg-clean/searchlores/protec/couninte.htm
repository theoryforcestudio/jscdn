<HTML>
<HEAD>

<TITLE>couninte.htm: fravia's counter intelligence page</TITLE>
</HEAD>

<BODY BGCOLOR=#C0C0C0 TEXT=#001010 VLINK=#405040>
<A NAME="anchortop"></A>
<!-- Begin Introdo -->
<!-- Fun with colors Begin -->
<table bgcolor="#FF0000" CELLPADDING="7" CELLSPACING="0">
<tr><th bgcolor="#FF0000">
<Font color="#804000" SIZE="7">
C<br>O<br>U<br>N<br>T<br>E<br>R<br><br><br>
</fonT>
<TH BGCOLOR="#804000">
<FONT COLOR="#FF8000" FACE="ARIAL"> <H2>
fravia's<bR>anonymity pages<br></H2><H3>COUNTER INTELLIGENCE</H3><br><H3>"Intercepting<bR> 
clever protectors'<bR>plans"</H3><br><br><br>
<FONT COLOR="#FF8000" SIZE="1" FACE="ARIAL">
Fravia's Nofrill<br>
Web design<br>
(1998)
</font>
</TH>
<TH BGCOLOR="#804000"><pre> </prE></TH>
<TH BGCOLOR="#804000"><br>
<FONT COLOR="#FF8000" SIZE="1" FACE="ARIAL">updated<br>September 1998<br><bR>Ported to<bR>
searchlore<br>March 2000
</TH>
<TH BGCOLOR="#C0C0C0"><center><a href="../noanon.htm"><img SRC="../images/anon1.gif"  ALT="noanon" ALIGN="BOTTOM" WIDTH="114" HEIGHT="43" BORDER="0" VSPACE="0" HSPACE="0"></a>
<br><font color="gray">Fravia's Anonymity Academy</font><br>

<h1>Every web step leaves traces <br>~<br></h1>


We'll always find what we want :-)

<hr width=22%>
The final equality check<br>(John Wigley & Mark Rosen ~ March 1997)<br>
[<a href="couninte.htm#john2">John2Marc</a>] ~
[<a href="couninte.htm#marc2">Marc2John</a>]<br> 
<hr width=22%>
The Economics of Piracy<br>(Brandon Van Every & Russ Williams ~ September 1998)<bR>
[<a href="eceono1.htm" tppabs="http://fravia.net/eceono1.htm">First part</a>] ~ 
[<a href="eceono2.htm" tppabs="http://fravia.net/eceono2.htm">Second part</a>] ~
[<a href="eceono3.htm" tppabs="http://fravia.net/eceono3.htm">Third part</a>]
<hr width="33%">
</CENTER>
</Font>
</TH>
<TH BGCOLOR="#804000"><pre> </prE></TH>
</TR>
</TABLE>
</center>
<!-- Fun with colors End --><center>
<br>
</center>                                              


<hr size="2">
<CENTER><H1>Crackers counter intelligence - CCI</H1><H3><i>
Let's see what our friends protectionists prepare for us
</i></H3>Well... I only seldom have the time to update this section, which is actually 
a pity, since there's a WEALTH of information out there. In order to understand how you 
get these messages 'automagically' please refer to my <a href="https://searchlores.nickifaulk.com/protec/howtosea" tppabs="http://fravia.net/howtosea">howtosearch</a> section.
<bR><a name="john2"></a>
<H3>The final equality check (March 1997)</H3>
Here it is, John Wigley (jw94@ecs.soton.ac.uk) to Mark Rosen (mrosen@peganet.com)<br>
</center>
<pre>
Command: GET "03_1997&1379792"
Subject:  Re: Registration Algorithm
From: jw94@ecs.soton.ac.uk (John Wigley)
Date:  6 Mar 1997 21:24:17 GMT
Message-ID:  <5fncm1$pfq@wapping.ecs.soton.ac.uk>
Organization:  University of Southampton
Newsgroups:  sci.crypt
References: <01bc245a$5a5b9820$43c866ce@markdsk>


Mark,
	Unless there is something that I'm missing, the potential hacker,
simply traces his way through the software until the final equality check
is made and then patches the check function to always return true.
This is almost universally the way that cracks are done nowadays, and all
your system seems to prevent from a crackers point of view is the writing
of a key maker program.

	I see little point in implementing complex crypto authentication
systems for product registration when all that will happen is that they
get bypassed.

	If you need this level of security for your product registration
then I think you should allocate at least as much (probably much more) R&D
expenditure to making sure that it won't get bypassed in 5 minutes with
SOFTICE. This could involve all sorts of things from encryption of program
code to timing execution to detect single stepping, and a host of other
anti debug tricks. You may find it useful to look at how current systems
are broken, by disassembling crack programs, and reading tutorials on
cracking.

	john

<a name="marc2"></a>
Mark Rosen (mrosen@peganet.com) wrote:
: 	I am working on developing a secure registration algorithm. Currently, the
: developer generates two primes, p and q (relatively prime) and computes
: their products. The large composite is stored in the program and one of the
: primes functions as the registration key -- if the (composite) mod
: (registration code) == 0, then the registration code is valid.
: 	To combat users passing registration codes around a system ID is computed
: (from a variety of system-dependent things). The developer generates a
: variable number of composites and primes and the system ID is used as an
: index into the array of composites -- essentially the same thing as above,
: but with many composite numbers. This method can be beaten too, but it
: requires lots of users to register and there to be a group effort.
: 	Ideally, we would like to use something similar to this:
: 		if (f(s) * code(s) == g(s)) then registered.
: 	Where s is the system ID, f and g are known functions, and code(s) is
: input by the user. However, this is easy to break, since g(s) and f(s) are
: known, you can just divide to get the value of code(s). I don't really know
: where to go from here, but I suspect that the best method would involve
: modular exponentiation somehow. For example
: 		if (f(s) ^ code(s)) mod (g(s)) == q(s)) then registered
: 	or something like that. I have no idea what f, g, and q would be though.
: Thanks for any help.


: Mark Rosen
: FireSoft - http://www.geocities.com/SiliconValley/Pines/2690
: Mark Eats AOL - http://www.geocities.com/TimesSquare/6660
</pre>
<br>
<i>Hei, want to know the profile of these guys? go
<a href="http://xp7.dejanews.com/profile.xp?author=jw94@ecs.soton.ac.uk%20(John%20Wigley)" tppabs="http://xp7.dejanews.com/profile.xp?author=jw94@ecs.soton.ac.uk%20(John%20Wigley)">John Wigley</a>
 and go <a href="http://xp7.dejanews.com/profile.xp?author=%22Mark%20Rosen%22%20<mrosen@peganet.com>" tppabs="http://xp7.dejanews.com/profile.xp?author=%22Mark%20Rosen%22%20<mrosen@peganet.com>">Mark Rosen</a>
<br>
John Wigley seems to know some basic facts... see for instance <a href="http://xp7.dejanews.com/getdoc.xp?recnum=4798893&server=dnserver.db96q2&CONTEXT=858337299.6234&hitnum=0" tppabs="http://xp7.dejanews.com/getdoc.xp?recnum=4798893&server=dnserver.db96q2&CONTEXT=858337299.6234&hitnum=0">this</a>
 about copy protection schemes involving hard drive serial
numbers
<a name="bra1"></a>
<HR><center><H2>23 September 1998</H2></center><p>And now another interesting example: 
"<font color=blue>The Economics of Piracy</font>", gathered by fravia+:  
Brandon Van Every and Russ Williams 
exchanging some very sound (and advanced) ideas about protection... there's a lot of smoke 
in here, of course, and yet, as you will read, there are quite 
sound protecting ideas in here, and I can 
only praise the idea of sticking the key "<font color=purple>in the 
INDEX STRUCTURE of the data, somewhere that takes  
quite a while to figure out how to transform without breaking 
everything</fonT>. Yes! Yes! This is <u>the way of the future</u> for all kinds of protections, 
and it is, IMO, the only strategy that will work. Once more: "<font color=purple>The cracker *has* to solve the structure 
of your data file to break    
the protection scheme.  No other choice.  Has to understand what's a float value, 
what's an index, etc.  And you could make it take a very long time for  
him to do that</font>. And exactly that will mark the difference between lam-o-crackers and 
real reversers: real reversers will <u>enjoy</u> this kind of protection! 
</i>




<CENTER><hr width=33%>[<A
HREF="eceono1.htm" tppabs="http://fravia.net/eceono1.htm">The Economics of Piracy: part one</A>] ~ 
[<A
HREF="eceono2.htm" tppabs="http://fravia.net/eceono2.htm">The Economics of Piracy: part two</A>] ~
[<A
HREF="eceono3.htm" tppabs="http://fravia.net/eceono3.htm">The Economics of Piracy: part three</A>] 
<hr>


<!-- internet searching strategies and hints content, end -->
<hr width=66%><center><a href="protec.htm"><IMG SRC="../images/basipet.jpg"
ALT="Petit image"
ALIGN=BOTTOM WIDTH="118" HEIGHT="68" BORDER=0 VSPACE=0
HSPACE=0></a><br><br>
<!-- how to search the web, by fravia+, signet begin -->
<table><tR><td width="300" height="2" bgcolor="#993300"></tD></tR></table>
(c) 2000: <font color=blue>[</font><a
href="../info.htm">fravia+</a><font color=blue><font
color=blue>]</fonT></font>, all rights
reserved
<!-- how to search the web, by fravia+, signet end -->


<!-- begin da closing bit, duh -->
</CENTER>
</body>
</HTML>
