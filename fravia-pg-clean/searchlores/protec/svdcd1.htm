<html>
<head>
<title>svdcd1.htm: svd's cracking cd1xedit.exe ver 1.23a:  "offline"
debugging</title>	
<STYLE type="text/css"> A:link { color: #02F } A:visited  { color: #808 } A:hover { color: purple; background: #AFB } </STYLE></head>
<BODY bgcolor="#C0C0C0" text="#001010" vlink="#405040" alink="#00FF50">   
<!-- HTML code by fravia+, working hard on edit.com: no frills, almost no graphic, quick loading -->
<center><H2>Cracking cd1xedit.exe ver 1.23a:  "offline"
debugging and other little marvels
</H2><br>By Svd, 9 January 1999<br>Slightly edited by fravia+<hr><i>
An essay in the great reversers tradition... and a nice lesson for protectors as well... I like this essay, full of 
nice little tricks (like the creation of a small bin to disassemble just 
the part of the code you'r interested in... of course Svd is right... and  I suspect 
that 
we are all by now so used to our huge *.alf dead listings that we simply don't always 
remember that there's a special proud also 
in being EFFECTIVE without any waste :-(<br>BTW: I'm using an old 
Texas Instrument calculator  for 
complex hexadecimal conversions as well (amazing how cheap are these little marvels 
once they 
are deemed 'obsolete' by the stupid commercial slaves)... way more effective than even 
the best software...</i>
</CENTER><hR>
<BR>Cracking cd1xedit.exe ver 1.23a<BR>method used: "offline"
debugging<BR>by: SvD<BR><BR>i cracked that proggy, at least removed the
annoyed nag start-screen.<BR>Of course, dealing the way i do, one can go
further and find what-ever<br>else he wants. I'm not interested in 
the crack as a
crack, but in the<br>method that I will call  "offline"
debugging.<br>I will try to explain ut here, coz i've used
it for many years with success.<BR>This kind of cracking is very useful,
when you don't have proper tools AND<bR>the proggie is
not self-checking/protected/compressed... OR<br>when you have all of them,
but they don't give any results :)<BR><BR>Tools i used:<BR><BR>* hiew.exe
5.15 - any hex editor + any disassembler will do;<br>Hiew just
incorporates both of them and saves the<br>annoing (copy bytes out, 
disassemble, view) procedure;<BR>* exehdr.exe 3.0  - exe dumper; '1992; use
/verbose option some;<BR>* some hex/dec calculator - i use my Sharp coz i
have no resident one'<BR>* BRAIN... nothing else<BR><BR>I have no SoftIce,
especialy for win; no ida; no wdasm. it will be nice<br>to have these tools,
but i would have to find them, to crack them, and<br>especially to LEARN 
how tyo use them... and i'm too lazy
now...<BR><BR>(if u want, read my other essay at 
<a href="https://searchlores.nickifaulk.com/protec/bulg_1.htm">fravia.net/bulg_1.htm</a> 
for<br>Data
Reversing Techniques. They are useful here)<BR>As it was required, i'll
explain also how i guessed things right.<BR><BR>[the info i had up to now
was: the .exe is win16bit, with delphi<BR>(i.e.Pascal), and some IceLock
protection (i've never heard of it)<BR>But that info could be gathered
otherwise: 1) run the exehdr - it will<BR>tell you that it is win 3.10 prog;
2) Look at any string table:<BR>strings start with a byte of their size
(which means Pascal); 3) and<BR>the proggie itself says that it is not win32s
compatible, and author<BR>said may be soon will make it 32bit.]<BR><BR>copy
the cd1xedit.exe to have the original somewhere else,<BR>for example copy it
as file zzzzz. You may need both the original and<BR>the cracked
thing.<BR><BR>so, 1st I run the PC Magz InCtl3 to listen to the activities of
the<BR>proggie. then i run it (cd1xedit.exe). Play a little, then
close.<BR>InCtl3 said nothing added to registry, win.ini,
system.ini.<BR>Anyway, the program remembers somewhere the time
elapsed.<BR>and the Time is initially 15 hours.<BR><BR>And then i run again and
push Register button to see what happens.<BR>There is a window with some
name, password etc...<BR><BR>[now i will describe a wrong suggestion - if you
are bored skip it]<BR>**** bo wrong suggestion<BR>So, i made a mistake and
started to look for the strings there. I<BR>looked for the "password:" string
and i found it with hiew. But that<BR>was some resource-grouped-structure
withou code there... then i<BR>studied it carefully and saw two suspicios
strings: "ProgramKey1"<BR>and "ProgramKey2". Search for them,... he-he, there
they are used...<BR>0x3FE1A... and just before them is the IceLock signature,
some names<BR>as strings (possibly window fields) used.<BR>Now
disassemble.<BR>((HIEW can disassemble; if your editor can't, here
is<BR>another trick. Extract the piece of code that you are interested
in,<BR>for example, from ofs 0x3FD00 to 0x40000, write it to file
named<BR>somethng.BIN, then run Sourcer or any other disassembler
to<BR>disassemble it. A long time ago i did not have HIEW, and made
a<BR>little C program, extracting 1K parts from some .exe given a list<BR>of
offsets))<BR><BR>I watched there, changed some  XOR AX,AX  to  SUB AX,AX 
(both are 2<BR>bytes and zero the ax register) in order to see if the .exe
is<BR>protected-by-itself - no it was not. But i didn't continue with
that<BR>piece of code (there are 2-3 procedures), because changing some
other<BR>CMP's and JE to JMPS or NOP,NOP doesn't give any result different
than<BR>GENERAL PROTECTION.<BR>**** eo wrong suggestion<BR><BR>Then i thought
a little, and run the proggie again. Wait some time,<BR>close it. Run
again.... OK, i noticed that time is counted by minutes<BR>only.<BR>OK,
multiply 15 hours * 60 mins = 900 = 0x384. Search the .exe for<BR>bytes x84
x03. Here they are: ofs 0x178D1, in some MOV ...[], 0384;<BR>another 2 MOV's
a little after that, and a PUSH 0384 immediate. The<BR>rest occurences are
not interesting: in some strings, or offsets in<BR>other commands (I'M
WONDERING IF SOMEONE SOMETIME will figure out to<BR>count not a simple
number, but to alloc some big heap of bytes and<BR>count them, comparing
adresses, not numbers... ;-)<BR><BR>hmmm, let ignore whole procedure. just
find the ret, (it is RETF<BR>04 - 3 bytes) and type it into the start instead
of (PUSH BP  MOV<BR>BP,SP) pair.<BR>Run proggie. You see? "YOUR TIME HAS
EXPIRED", etc... Well, restore<BR>the bytes as they were.. We have found the
time-counter initialization<BR>routine.<BR><BR>[second possibly-wrong
suggestion: but gives a light over the next one]<BR>***<BR>hmm, let's change
the number in all the MOV's to some other, for<BR>example 0x444 (i.e x44 x04
as bytes). There are come CMP's and JE<BR>before every MOV. hmmm. they are
made to ignore the MOV's if<BR>something is zero... Let's make all of them
(3) go always through the<BR>MOV's.... Run the proggie... You see? "you have
14:59 left". Despites<BR>that 1 minute before it was 14:42 (for example - it
depends how much<BR>we played initially)<BR><BR>ok, now lets see what happens
if we change that immediate PUSH. make<BR>it, for example PUSH 0x584 instead
of 0x384. Run the proggie... "YOU<BR>HAVE 18:39 left". ha-ha. ok, now we can
make it as much as we want,<BR>but how to get that nag screen
out...<BR>***<BR><BR>NOW, the most useful part of this comes.<BR>you can use
this anywhere in any .exe<BR><BR>we are intersetd how to make that functin
disappear... Well, we will<BR>simmulate the run of the stack. Find where is
the function start:<BR>0x170E5. Now, look very carefuly at the EXEHDR
results: there are all<BR>segments listed on by one, with start offsets and
size + other<BR>features.<BR>0x170E5 is in segment 4 (starting at x14200), so
the offset of out<BR>func there is 0x2ee5. Now look after the segment table.
There are ALL<BR>the cross-references of all the CALL's in the .exe. Search
for 0x2EE5,<BR>segment 4. only once. offset 0x2A19, segment 9. Which means
(adding<BR>segment 9's start offset 0x38700) file offset 0x3B119 .  Now run
HIEW<BR>and go there. And disassemble. There are some CMP+JE's
somewhere<BR>below....there is CMP+JE's a little before it ....<BR>hmmm, if
you play with the jumps after it, you will get the "YOUR TIME<BR>HAS
EXPIRED". Let make the CMP+JE's that is before to alsays skip<BR>(i.e. change
JE to JMPS).<BR>Here we are. The nag screen disappears.<BR><BR>Now, if anyone
is interested, or the protection you have is more<BR>sophisticated, you can
follow the same method - find func's start,<BR>look in wchich code segment it
is in EXEHDR's results; find any<BR>references to it; explore
them...<BR><BR>have a nice dream.<BR>adio<BR>SvD<BR>P.S. for the lazy
one's:<BR>Comparing files CS1XEDIT.EXE and original<BR>000178C6: EB
7C<BR>000178D5: 44 84<BR>000178D6: 04 03<BR>000178E2: EB 7C<BR>000178F1: 44
84<BR>000178F2: 04 03<BR>000178FE: EB 7C<BR>0001790D: 44 84<BR>0001790E: 04
03<BR>00017972: 05 03<BR>0003B110: EB 74<BR>--------
<BR>
<BR>
<A HREF="mailto:svd_bg@yahoo.com"><font size="-1"
face="arial,helvetica">svd</font></A>

</UL>