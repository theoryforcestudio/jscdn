<HTML>
<HEAD>

<TITLE>eceono3.htm: fravia's counter intelligence: The Economics of Piracy -3</TITLE>
</HEAD>

<BODY BGCOLOR=#C0C0C0 TEXT=#001010 VLINK=#405040>
<A NAME="anchortop"></A>
<!-- Begin Introdo --><center>
<H2>The Economics of Piracy - 3</H2><H3>An interesting email-exchange between<br>Brandon Van Every and Russ Williams<br>(september 1998)</h3>
<H4>Courtesy of fravia's pages of reverse engineering</H4><hr>
<i>Welcome to the third part of a very interesting email-exchange between 
some 'real' games' programmers. Even if the main concern of these guys is to 
avoid CD-ROM pirating, some of the tricks they are proposing and evaluating 
have quite a relevance for all reverse engineering enthusiasts, as you'll read. I have added very few comments. 
</i></center>
<hr>
<a href="eceono3.htm#bra1">Bra1Rus</a> |
<a href="eceono3.htm#rus2">Rus2Bra</a> |
<a href="eceono3.htm#rus3">Rus3Bra</a> |
<a href="eceono3.htm#rus4">Rus4Bra</a>
<a name="bra1"></a>
<hR>
<prE>
Russ Williams wrote in message &lt;906206116.15699.0.nnrp-
&gt;
&gt;Well, if you do the security on every single disc, then the QA
&gt;would be done on the protected game - if it goes wrong,
&gt;the testers will bitch about it...


But the lead programmer could screw up by generating a non-unique ID that
doesn't crash the game.  Like, he grabbed the wrong triangle because the
engineers, not knowing any better, moved something.  You'd need QA that
actually knows what the identification process is supposed to be.  Either
that or an infallible lead programmer.  :-)

&gt;OK. Fair point. Something like using the least significant
&gt;bits of each byte in a BMP body would be bad because it
&gt;could be wiped out trivially once detected.

Rather, &quot;could be wiped out trivially.&quot;  The only thing that needs detecting
is that BMP data exists.  Then you wipe the BMP data, you don't need to know
if it's an ID source or not.  You just need to add enough noise to the data
that whatever ID info it might have been carrying is completely scrambled.
Although past a certain point of perturbation, the perturbed BMP data could
become meaningless.  Ruin all the artwork, maybe this isn't advantageous to
the cracker after all.  Then again, maybe people would be happy with games
in new color schemes.


&gt;&gt;The *statistical* part comes from how many disks you
&gt;&gt;release to the world. The odds of the extremely determined
&gt;&gt;cracker getting ahold of 1, or 2, of them.
&gt;
&gt;Yup. The way I'd counter that is to provide codes grouped
&gt;on 3 sources. That way you need nC3 keys, but a disc from
&gt;&lt;=3 sources will have a piece of the data that's identical
&gt;in all 3 versions and identifies which 3 leaked. If only
&gt;2 leak, then there will be many more keys to identify
&gt;which 2. Obviously, this is trivially expandable to any
&gt;number in a group (in case you think 42 discs will go
&gt;walkabout).


It's late... can you explain this one from the top?  You want to somehow
scramble data from 16 different disks into each other?  One thing I'm really
missing is what exactly you're scrambling.  Different source pools?  No that
can't be it... it's late.

&gt;It could work for levels if you use lots and lots of strong
&gt;encryption and chain levels together (ie: the key for level
&gt;n is in the data for level n-1) and alter things after some
&gt;number of levels. They'd crack the first dozen levels, say,
&gt;figure it's working, but have missed that the encryption
&gt;method changes for level 13..


The decryption method is always contained in the binary somewhere.  So
you're just presuming about the carefulness/carelessness of the cracker.
There are a million needle-in-a-haystack strategies out there, all can be
defeated with sufficient patience.  Just a matter of how much you enjoyed
writing it, vs. how much the cracker enjoys cracking it.

&gt;&gt;No, you don't want it in the raw data.  The raw data is easy
&gt;&gt;to perturb randomly and still get basically the same data.
&gt;
&gt;That depends how you place it. Ultra low frequency
&gt;components across the whole dataset would be much
&gt;more difficult to remove. Imagine a sample with a 4Hz
&gt;sine wave mixed in - it would be undetectable by ear
&gt;and noise wouldn't remove it.

So you run it under an audio filter and chop anything the ear can't hear.
Then you do some nasty things to what you can hear, so that the data is now
sufficiently different.

&gt;&gt;You want to stick your key in the INDEX STRUCTURE
&gt;&gt;of the data.
&gt;
&gt;Too obvious.


Again, the goal is not &quot;find the key!&quot;  The goal is to erase the key.  An
index structure is selected because it'll take the most time to erase, you
have to figure out how the damn thing works before you can do it.

&gt;&gt;Somewhere that takes quite a while to figure out how
&gt;&gt;to transform without breaking everything.
&gt;
&gt;But, as you've said, there are crackers willing to spend
&gt;any amount of time doing the grunt work..


Well, what kind of index file would be so onerous that only the most
foolhardy cracker would attempt it?

&gt;&gt;To reiterate, you don't FIND the key.  You eradicate
&gt;&gt;everything, including the key.
&gt;
&gt;It's not always that simple. Unless the crackers are going
&gt;to rip out every image, every sample, every piece of
&gt;data from the game then they're not going to be 100%
&gt;effective.


They are going to do exactly that.  They are going to develop automated
methods for ripping everything to shreds.  Hence why encoding in BMP files
doesn't work, the structure of the file is well-known and easily
transformed.  <font color=blue>The index methods are not well-known,</font>   	  		  ;True! Yet the 
<font color=blue>they're unique to each app.  So the goal is to think up a really onerous,</font> ;debugging overload
<font color=blue>convoluted one. Something so horrid you'd need months of test-debug</font> 	  ;is something that
<font color=blue>iteration to figure it all out</font>.					  	  ;programmers that
									  ;are not crackers as
&gt;[...]								     ;well will not endure!
&gt;&gt;Incidentally, if you're willing to burn your CDs one at a time,
&gt;&gt;then you could use the same data transformation methods
&gt;&gt;to encode the unique identity of a file.  Rather than sticking
&gt;&gt;a unique ID on each disk somewhere within the file, and
&gt;&gt;running the risk of 2 files being compared, you make the data
&gt;&gt;file on *every* CD unique.
&gt;
&gt;That was the idea of #2 above - a compressed and
&gt;encrypted data set can't be compared meaningfully if
&gt;they encryption key changes between builds. You need
&gt;to spend ages decompressing before you can
&gt;compare.


No, your techinque is different.  I'm not encrypting anything on the CDs,
I'm just guaranteeing that the entire data file has a unique bit pattern for
each CD.  The entire file becomes the ID.  I can read my unique file without
a decryption mechanism.  The problem with your decryption, is that once the
file is decrypted it's the same regardless of what CD it came from.  And the
file *can* be decrypted, the code is always available to do this in the
binary itself.


Cheers,                    3d graphics optimization jock
Brandon Van Every          Seattle, WA
-----------------------------------------------------------------------
If we are all Gods         and we have thrown our toys the mortals away
and we are Immortal        What shall we do
and we cannot die          to entertain ourselves?</prE>
<a name="rus2"></a>
<hR>
<pre>Brandon Van Every wrote:
&gt;Russ Williams wrote:
[...]
&gt;&gt;&gt;The *statistical* part comes from how many disks you
&gt;&gt;&gt;release to the world. The odds of the extremely determined
&gt;&gt;&gt;cracker getting ahold of 1, or 2, of them.
&gt;&gt;
&gt;&gt;Yup. The way I'd counter that is to provide codes grouped
&gt;&gt;on 3 sources. That way you need nC3 keys, but a disc from
&gt;&gt;&lt;=3 sources will have a piece of the data that's identical
&gt;&gt;in all 3 versions and identifies which 3 leaked. If only
&gt;&gt;2 leak, then there will be many more keys to identify
&gt;&gt;which 2. Obviously, this is trivially expandable to any
&gt;&gt;number in a group (in case you think 42 discs will go
&gt;&gt;walkabout).
&gt;
&gt;It's late... can you explain this one from the top?  You want
&gt;to somehow scramble data from 16 different disks into
&gt;each other?  One thing I'm really missing is what exactly
&gt;you're scrambling.  Different source pools?  No that
&gt;can't be it... it's late.

OK. You're sending discs to 4 people: A, B, C and D.
You want to make sure that even if 3 of them leak, you
can ID them.
You hide 4 keys: ABC, ABD, BCD, ACD.
ie: the first key is in A's copy, B's copy and C's copy
but not in D's.

If the cracker gets A's, B's and C's copies and checks
them for differences, they'll detect 3 of the keys:
ABD won't be in C's, BCD won't be in A's and ACD
won't be in B's. But ABC will be the same in all 3
versions. You know that there are 4 codes and where
they are, but the cracker doesn't. If they eliminate
all the differences, key ABC remains and identifies
the 3 culprits.

If only B and C leak, then keys ABC and BCD will
remain.

&gt;&gt;It could work for levels if you use lots and lots of strong
&gt;&gt;encryption and chain levels together (ie: the key for level
&gt;&gt;n is in the data for level n-1) and alter things after some
&gt;&gt;number of levels. They'd crack the first dozen levels, say,
&gt;&gt;figure it's working, but have missed that the encryption
&gt;&gt;method changes for level 13..
&gt;
&gt;The decryption method is always contained in the binary
&gt;somewhere.  So you're just presuming about the
&gt;carefulness/carelessness of the cracker.

Yup.

&gt;There are a million needle-in-a-haystack strategies out
&gt;there, all can be defeated with sufficient patience.

Yup. But who cares? If it takes them 2 months to crack
the game that's 2 months of sales and then the game
is 'old hat'.

&gt;Just a matter of how much you enjoyed writing it, vs. how
&gt;much the cracker enjoys cracking it.

Yup.

&gt;&gt;&gt;No, you don't want it in the raw data.  The raw data is easy
&gt;&gt;&gt;to perturb randomly and still get basically the same data.
&gt;&gt;
&gt;&gt;That depends how you place it. Ultra low frequency
&gt;&gt;components across the whole dataset would be much
&gt;&gt;more difficult to remove. Imagine a sample with a 4Hz
&gt;&gt;sine wave mixed in - it would be undetectable by ear
&gt;&gt;and noise wouldn't remove it.
&gt;
&gt;So you run it under an audio filter and chop anything the ear
&gt;can't hear. Then you do some nasty things to what you can
&gt;hear, so that the data is now sufficiently different.

And who would go to all that trouble?
[...]
&gt;&gt;&gt;Somewhere that takes quite a while to figure out how
&gt;&gt;&gt;to transform without breaking everything.
&gt;&gt;
&gt;&gt;But, as you've said, there are crackers willing to spend
&gt;&gt;any amount of time doing the grunt work..
&gt;
&gt;Well, what kind of index file would be so onerous that only
&gt;the most foolhardy cracker would attempt it?

I have no idea. All indices seem fairly simple formats to
me.

---
Russ
</pre>
<a name="rus3"></a><hR>
<pre>&gt;&gt;&gt;&gt;No, you don't want it in the raw data.  The raw data is easy
&gt;&gt;&gt;&gt;to perturb randomly and still get basically the same data.
&gt;&gt;&gt;
&gt;&gt;&gt;That depends how you place it. Ultra low frequency
&gt;&gt;&gt;components across the whole dataset would be much
&gt;&gt;&gt;more difficult to remove. Imagine a sample with a 4Hz
&gt;&gt;&gt;sine wave mixed in - it would be undetectable by ear
&gt;&gt;&gt;and noise wouldn't remove it.
&gt;&gt;
&gt;&gt;So you run it under an audio filter and chop
&gt;&gt;anything the ear can't hear. Then you do some nasty
&gt;&gt;things to what you can hear, so that the data is now
&gt;&gt;sufficiently different.
&gt;
&gt;And who would go to all that trouble?

One other point that I missed before: what about
low-frequency components in *images*? There is no
'outside the seeing range' in this case.

And as for &quot;sufficiently different&quot;, these methods are
so subtle that to be sure it's code free the data would
need to be replaced by white/pink noise - hardly worth
the effort of cracking if that's what you end up with.
Most crackers would simply rely on anonymity at
both ends and let the leaks fend for themselves (or
distribute the final version from shops).

---
Russ
</pre>
<a name="rus4"></a><hR>
<pre>Brandon Van Every &lt;<A HREF="http://www.dejanews.com/profile.xp?author=vanevery@blarg.net&ST=PS" tppabs="http://www.dejanews.com/profile.xp?author=vanevery@blarg.net&ST=PS">vanevery@blarg.net</A>&gt; wrote:&gt;
&gt;Russ Williams wrote:
&gt;&gt;One other point that I missed before: what about
&gt;&gt;low-frequency components in *images*? There is
&gt;&gt;no 'outside the seeing range' in this case.
&gt;
&gt;Sure there is.  Darkest part of the image, you don't
&gt;need it.  People scale the luminescence of photos
&gt;all the time.

But this won't get rid of it. Similar watermarking
techniques are capable of detecting a copy of an
image that's been altered (blur/soften/sharpen/etc.),
printed into a newspaper and scanned back into
a computer. Simple bit flipping or scaling just won't
cut it.

---
Russ
</pre><hR>
<H4>Well, let's see if we can fix some points out of this long email-exchange 
between game-programmers. First of all let's recall our 'bearings'. Top game programmers'  
protection techniques are interesting because these guys are under very 
sophisticated attacks from the 'real piracy' industry: i.e. those guys that BURN hundreds 
(thousands?) of pirated CD-ROMs with the latest "hit" in order to steal money. Whole industries 
are active in this sense in Asia and Eastern Europe. 
This activity is not only stealing, it is a "commercial" attitude that we not 
only DO NOT condone, but that we are ready to counter together with these same protectors if 
needs be, for instance delivering our own thoughts on these protection schemes.<bR>On the other hand, these same attacks seem to push these protectors to an higher 
degree of resourceful inventive: unfortunately their main problem is identifying leaks when 
they send CD-ROMs to the magazines for testing, yet part of the schemes that they propose 
could bear interesting fruits in the future for all forms of software protection, CD-ROM 
based or NOT CD-ROM based. That's the reason I have decided to publish this.<br>
As you have read, there are quite a lot of sound protecting ideas in here, and I can 
only praise the idea of sticking the key "<font color=purple>in the 
INDEX STRUCTURE of the data, somewhere that takes  
quite a while to figure out how to transform without breaking 
everything</fonT>. Yes! Yes! This is <u>the way of the future</u> for all kinds of protections, 
and it is, IMO, the only strategy that will work. Once more: "<font color=purple>The cracker *has* to solve the structure 
of your data file to break    
the protection scheme.  No other choice.  Has to understand what's a float value, 
what's an index, etc.  And you could make it take a very long time for  
him to do that</font>. And exactly that will mark the difference between lam-o-crackers and 
real reversers: real reversers will <u>enjoy</u> this kind of protection! Of course 
we will reverse these schemes, yet it shall -let's hope- take 
some time (like it should be when solving any good puzzle) and this delay will 
serve this kind of protectors well, since by the time we have 
cracked their games' protections, the commercial products themselves 
will already be "oldies". So what? Who cares? Man, I'm myself at this very moment cracking 
in the background  
a very old DOS game just for the fun of it! Who cares if the target is the last frizzy-dizzy 
flop of tomorrow? It's the amount of intelligence that has been put into the protection scheme 
that counts :-)<bR>Let's hope that Brandon and Russ will soon implement some of their 
smart and inventive projects!</H4><hr><center><H3>
Awaiting your comments!</H3></center>

<CENTER><HR ALIGN=CENTER WIDTH=100% SIZE=3>[<A
HREF="couninte.htm">Back to counter intelligence</A>] ~ 
[<A
HREF="eceono1.htm">Back to part one</A>]
~ 
[<A
HREF="eceono2.htm">Back to part two</A>]
<hr width=33%><!-- internet searching strategies and hints content, end -->
<hr width=66%><center><a href="couninte.htm"><IMG SRC="../images/basipet.jpg"
ALT="Petit image"
ALIGN=BOTTOM WIDTH="118" HEIGHT="68" BORDER=0 VSPACE=0
HSPACE=0></a><br><br>
<!-- how to search the web, by fravia+, signet begin -->
<table><tR><td width="300" height="2" bgcolor="#993300"></tD></tR></table>
(c) 2000: <font color=blue>[</font><a
href="https://searchlores.nickifaulk.com/protec/info.htm">fravia+</a><font color=blue><font
color=blue>]</fonT></font>, all rights
reserved
<!-- how to search the web, by fravia+, signet end -->


<!-- begin da closing bit, duh -->
</CENTER>
</body>
</HTML>