<HTML>
<HEAD>
<!--  formamus.htm version 02 February 1998 
      INSTRUCTIONS FOR SUBMITTING: DO NOT USE HTML EDITORS!
      SEARCH THIS TEXT FOR THE STRING "Your_" 
      AND REPLACE WITH WHATEVER YOU WANT TO PUBLISH! 
      THANKS A LOT: this will allow automated retrieval -->
<TITLE>puark.html C Protection Techniques</TITLE>
<STYLE type="text/css"> A:link { color: #02F } A:visited  { color: #808 } A:hover { color: purple; background: #AFB } </STYLE></head>

<BODY bgcolor="#CCCCCC" TEXT=#001010 LINK=#0000FF ALINK=#00FF00 VLINK=#3366CC>
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%  HEIGHT="22">
<TR><td></td>
<td>
<!-- Choose  a TITLE probably wont be changed -->
<center><FONT SIZE="+2">Protection Techniques</fonT><br>
        <FONT SIZE="+1">How to protect your C programs</fonT>
</center>
</td>

<td>
<!-- Choose  a PROJECT GIF, leave this if unsure -->
<center><a href="protec.htm"><IMG SRC="https://searchlores.nickifaulk.com/protec/protec.gif" ALT="protec" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a><br>
<font color=gray>How to protect</FonT>
</center></td></tr>
<tR>
<td bgcolor="#FFFFEA"><center>
<FONT COLOR="890000">
<!-- CHOOSE A DATE (will probably be changed) -->
20 January 1999
</FONT></center>
</td>
<td bgcolor="#FFFFEA"><center>by <font size=+3>
<!-- CHOOSE A HANDLE (wont be changed) -->
+puark
</fonT></center>
</td>
<td VALIGN="center" bgcolor="#FFFFEA">
<!--
<a href="hcu98_3.htm"><IMG SRC="hcu1.gif" ALT="+cracker" ALIGN=BOTTOM 
WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>
-->
</td>
</tr>
<TR><td><center><a href="index.html"><IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALIGN="BOTTOM" 
BORDER="0" VSPACE="0" HSPACE="0"></a></center></td>
<TD BGCOLOR="898030"><center>Courtesy of Fravia's page of 
reverse engineering</center> 
</center></TD>
<td BGCOLOR="898030">
<center>
<!-- Your truly+ will edit only if really necessary -->
slightly edited<br>
by fravia+</center></td>
</TR>
<!-- this is for the data.....fra_00xx....yymmdd....handle..beg+int...not ass... -->
<tr><td><font color="#C4C0CF">fra_00xx<bR>990120<br>+puark<br>1100<br>HP<br>AD<br></fonT></td><td><i><center>
Was about time!<br><H3>Revenge of the protectors!</H3>After so many years I was beginning to dispair... tons of emails by lots of programmers: 
"thanks, fravia+... great site you have there... I have learned a lot, really" and almost 
never a contribution, a small essay, a little constructive feedback...<br>Boys, the real sense (and power) 
of the web is GIVING. Giving is moving. 
If you just hoard knowledge you'll just remain where you are.<bR>
Thank +puark... awaiting your next essays! (Let's hope other protectors will 
follow your great example)<br>See, the crackers scene changed radically after the 
first tutorials sites came out (anyone still remembers how things were before +ORC? I do :-)<bR>
Why shouldn't the <b>PROTECTOR</b>'s scene benefit from a similar approach?</i></center></td>
<td></td>
</tr>
<TR><td></td>
<!-- Leonard Coehn's old song, because we are poets, not only crackers -->
<TD BGCOLOR="898030"><center></i><b>There is a crack, a crack in everything 
That's how the light gets in</b></center>
<!-- Leonard Coehn's old song, because we are poets, not only crackers -->
</center></TD><td></td>
</TR>
<TR>
<td VALIGN= "MIDDLE" bgcolor="#C6E7C6"><font color=blue><center>
Rating</FONT></FONT></center>
</TD>
<td VALIGN = "MIDDLE" bgcolor="#C6E7C6"><font color=blue><center>
<!-- CHOOSE A RATING (may be changed) -->
()<B>Beginner</B> (x)<B>Intermediate</B> ( )<B>Advanced</B> ( )<B>Expert</B></FONT>
</center></td>
<td></td>
</tr>
</table>
<!-- END HEAD  -->
<bR>
<!-- CORPUS  -->

<!-- CHOOSE A COMMENT (may be changed)  -->

The <b>How to Protect Better</b> lab offers some very useful bullet points. I would
however like to pick out a few of the most important points and develop them 
further to show how to apply the techniques to C and C++ programs.

<hR>
<center>
   <FONT SIZE="+2">
<!-- CHOOSE A TITLE (wont probably be changed) -->
Protection schemes for C and C++ programs
   </FONT><BR>
   <FONT SIZE="+2">
<!-- CHOOSE A SUBTITLE (wont proabbly be changed) -->

Adding protection to your C and C++ programs after they are compiled.

   </FONT><BR>
   <FONT COLOR="0B7FC1">
<!-- REPEAT YOUR CHOSEN HANDLE HERE -->Written by 
+puark
   </FONT>
</center><br><br>

<!-- INTRO STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Introduction</fonT>
</fonT></center></td></tr></table>
<p>

Good protection schemes should be written in assembler. Applications should be
written in a high level language. These two statements are incompatible if you
truly wish to incorporate protection throughout your application. I have however
developed a technique that allows protection to be added to a C or C++ program
<b>after the program has been compiled and linked</b>. This has the 
advantage that the inserted code can be generated by another program and can
thus be different for every program or version of a program that you issue.

<br><br>

<!-- TOOLS STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Tools required</fonT>
</fonT></center></td></tr></table>

C Compiler<br>
SoftIce<br>
IDA<br>
And most importantly, an enquiring mind<br>

<br><br>

<!-- TARGET URL STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Target's URL/FTP</fonT>
</fonT></center></td></tr></table>
<!-- DON'T FORGET TO PASTE HERE THE URL/FTP OF YOUR TARGET(S) -->

Not applicable.

<br><br>

<!-- PROGRAM HISTORY STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>History</fonT>
</fonT></center></td></tr></table>
<!-- PASTE HERE YOUR TARGET'S HISTORY (if any) -->
<p>

Fravia+ and others have stated that to be a good protectionist you first need to
be a good cracker. I admit I started out as a protectionist, and with hind-sight
I was not a particularly good one. I then learned and used the crackers techniques, 
most from Fravia+s wonderful web site. (Thanks Fravia+). These lessons in cracking
gave me some wonderful insights into how I might in turn protect my own programs
from crackers. I now want to give something back to the community, hence this
article.
<br><br>

<!-- REAL ESSAY  STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Essay</fonT></fonT>
</center></td></tr></table>
<!-- PASTE HERE THE TEXT OF YOUR ESSAY
     THIS IS OF COURSE THE MOST IMPORTANT PART
     PLEASE CHECK THE MARGINS WHEN YOU ARE FINISHED! 
     SHOULD NOT BLAST NETSCAPE MARGINS OUT! HAVE A LOOK INSIDE
     YOUR OWN BROWSER WHEN YOU HAVE FINISHED!  -->

<font size =+2><b>Introduction</b></font><p>

I don't want to get into the argument between the use of high level languages
and assembler. I agree that assembler language can be much more efficient than
a high level language both in speed of operation and in memory footprint. However
I feel that a high level language (such as C or C++) is generally the only tool
of choice for many applications. Unfortunately any protection scheme that is
written in a high level language is significantly weaker than one in assembler.<p>

I would like to demonstrate a technique that allows assembler code to be added to
an executable after it has been compiled and linked.<p>

To demonstrate the technique I will implement two of Mark's famous 14 protectors
commandments.<p>

6. Patch your own software. Change your code to call different validation
routines each time.<br>

B. Flood the cracker with bogus calls and hard coded strings.<p>

I have techniques that implement many more of the commandments and I will describe
them in later articles which will build on the techniques described here.<p>

<font size =+2><b>Patch your own software</b></font><p>

My technique is probably not quite what Mark had in mind. I assume Mark meant
that each time the application was <i>run</i> it would modify its own file copy.
The idea I have in mind however is that every <i>release</i> of a program will
be different. Many releases of a product are just bug-fixes or minor changes to
the program. The comparison of two releases will show that they are substantially
the same with only a small percentage change. Thus if one version has been 
cracked then cracking later versions is very easy.<p>

To patch an executable we need to know two things.<p>
1. Where the patch is to be applied<br>
2. What goes into the patch<p>

<font size =+1><b>Where the patch is to be applied</b></font><p>

We can determine where to apply a patch by putting a <i>signature</i> in the
program which can be recognised by the patch program. This signature should be
one that would not normally appear in the output of the compiler/linker. For
patches to the code segment I define the following macro.

<pre>
#define PATCH10 \
	__asm { _emit 0x72}; \
	__asm { _emit 0x01}; \
	__asm { _emit 0x72}; \
	__asm { _emit 0xf9}; \
	__asm { _emit 0xe9}; \
	__asm { _emit 0x01}; \
	__asm { _emit 0x00}; \
	__asm { _emit 0x00}; \
	__asm { _emit 0x00}; \
	__asm { nop };\
</pre>

The code generated by this macro has the advantage that it could never be
generated normally by a compiler. It is also code that cannot be correctly
handled by any dis-assembler (including IDA), but more on this later.<p>

The best dis-assembly of this code is:-

<pre>
	72 01            jp +1
	72 f9            jp -7
	e9 01 00 00 00   jmp +1
	90               nop
</pre>

The reason this cannot be generated normally is clear in the first jp instruction.
It is actually jumping to the middle of the second instruction, specifically to
the byte f9. This op-code is the assembler instruction 'stc'. It is clear that
this sequence would not normally be generated by any compiler!<p>

This pattern of 10 bytes can be searched for by the patch program and replaced
by alternative assembler code of length 10 bytes. Of course the macro can be
modified to produce different lengths of 'holes' in the executable. For example.<p>

<pre>
#define PATCH20 \
	__asm { _emit 0x72}; \
	__asm { _emit 0x01}; \
	__asm { _emit 0x72}; \
	__asm { _emit 0xf9}; \
	__asm { _emit 0xe9}; \
	__asm { _emit 0x0b}; \
	__asm { _emit 0x00}; \
	__asm { _emit 0x00}; \
	__asm { _emit 0x00}; \
	__asm { nop };\
	__asm { nop };\
	__asm { nop };\
	__asm { nop };\
	__asm { nop };\
	__asm { nop };\
	__asm { nop };\
	__asm { nop };\
	__asm { nop };\
	__asm { nop };\
	__asm { nop };\
</pre>

This produces a 'hole' of 20 bytes. The same principle can be extended to 
provide holes of any size. I use holes of upto 100000 bytes in my programs.<p>

To use these macros is very easy. The following source code shows the principle<p>

<pre>
void	main(void) {                    PATCH10
    printf("Hello world\n");            PATCH20
    exit(1);                            PATCH10
}
</pre>

This code will result in 'holes' of 10 or 20 bytes between each line of compiler
generated code. The next question is what do we want to put in these 'holes'.<p>

<font size =+1><b>What can be patched in</b></font><p>

Now 10 or 20 bytes may not seem much. Consider however that a compiler will
generate only 20 or 30 bytes of code on average for each line of source code
(this varies from only four or five bytes upto 100 or so). Percentage wise this
can easily add up to a substantial fraction of our code and has the advantage
that is is dispersed throughout our code.<p>

I admit that we can't do much functional code in 10 or 20 bytes. We can however
(finally) get to Mark's Commandment B. Flood the cracker with bogus code and
hard coded strings.<p>

<font size =+2><b>Flood the cracker with bogus code.</b></font><p>

The Microsnot C++ compilers can produce either optimised or non-optimised code.
I noted that in the non-optimised code every line of source code is self
contained and registers EAX, EBX, ECX and EDX are not used to carry values
between the code generated for different source code line. In optimised mode
however these registers can be used to hold local variables.<p>

To insert assembler between lines of C source code I compile my program with
optimisation turned off. I can then generate bogus code using the following
types of instructions.<p>

<pre>
mov toReg, frReg
mov toReg, [ebp+xx]
inc/dec toReg
mov toReg XXXXXXXX
mov toReg dword_xxxxxxxx
cmp toReg dword_xxxxxxxx
</pre>

Where <i>toReg</i> is one of EAX,EBC,ECX,EDX and <i>frReg</i> is one of
EAX,ECX,EDX,EBX,ESP,EBP,ESI or EDI. The dword_xxxxxxxx is a random address in
the data segment. This one is especially useful since it results in many bogus
references being produced by IDA. One of the powers of IDA is being able to
easily identify any reference to a data value. With hundreds (or thousands) of
bogus references this makes the crackers work so much harder.<p>

This list of bogus code instructions can easily be extended. The trick is to
look at the output of the compiler (using IDA) and see what typical instructions
it generates. We don't want to generate code that will affect the program
execution so the following instructions would not be allowed<p>

<pre>
mov frReg, toReg
mov dword_xxxxxxxx, toReg
push toReg
</pre>

The source code to generate this code is simply a large switch statement, one
case for each type of generated code. The selection is made on an random basis
and the choice of registers for each case is also chosen at random. The switch
statement is enclosed in a loop which adds data into a 'hole' until the hole is
filled with random garbage. Take care however to include a few one byte op-codes
so that the holes can be filled completely (e.g. stc, clc).<p>

<font size =+1><b>Confusing IDA and SoftIce</b></font><p>

I would also like to demonstrate some techniques that will confuse IDA and
SoftIce disassembly. Remember the code generated by the PATCH macros? The
code had two execution routes, in one route a byte could be used as the first
byte of an op-code in another route it could be used as a data byte to an op-code.
IDA is unable to cope with this since it can't show the same byte being used in
two different assembler instructions.<p>

This technique can be used to hide functional code. Take for example the
following code

<pre>

430502  81 C7 33 C0 F7 F0  add edi, 0F0F7C033h
430508  0F 82 F6 FF FF FF  jb loc_430502+2

</pre>
At first glance this looks fairly innocuous. But note that the conditional jump
is to a location in the middle of a multi-byte op-code. If we dis-assemble from
address 430504 we get the following code.

<pre>

430504  33 C0              xor eax,eax
430506  F7 F0              div eax
430508  0F 82 F6 FF FF FF  jb loc_430504

</PRE>
Now this is certainly <b>not</b> innocuous. It will generate a divide by zero
exception and this was hidden from view in the original IDA output.<p>

Now it is certainly more difficult to write code in this way but for certain
key routines (like tests for the presence of SoftIce) it can be an invaluable
technique. Personally I have combined this technique with the technique of 
patching code into holes to put multiple checks for SoftIce into my own code.
Each SoftIce check was generated using random registers and random code sections
so that each SoftIce check is different. Having found one such routine the cracker
can not then use a simple byte search to find the other routines.<p>

<!-- FINAL NOTES STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Final Notes</fonT>
</fonT></center></td></tr></table>
<br>
In future articles I will describe further technique that can be used in C and
C++ programs. In particular<p>

How to use encrypted strings and how to avoid having to decrypt them into memory<br>
How to encrypt parts of your C and C++ program.<br>
How to calculate Cyclic Redundancy Checks on part of your program<br>
How to detect bpx and bpmb type breakpoints in your code<br>
How to stop a cracker from getting any useful information from your program resulting from
putting a bpmb for read or write on a key global data variable<br>
How to use system API calls (such as MessageBoxA) in such a way that breakpoints
on them never break and API Spy programs don't report their usage<br>

<p>
<!-- OB DUH STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Ob Duh</fonT></fonT>
</center></td></tr></table>
 <center>
Not applicable
</center>

<!-- WAY OUT STARTS HERE -->
<hr>
<center><i>You are deep inside fravia's <a href="https://searchlores.nickifaulk.com/protec/searchlores.org">searchlores org</a>,  
choose your way out:</i></center>
<br><center>
<!-- EITHER A NICE GIF LIKE THIS -->

<!-- 
<a href="project3.htm"><IMG SRC="project3.gif" 
ALT="projecT3" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>
<br>
<font color=gray>Back to project 3</FonT>
<br><bR>
-->

<!-- OR JUST A LINK LIKE THIS -->

<!--
<IMG SRC="bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="project1.htm">Back to Your_chosen_project</A> 
<hr width=33%>
-->

<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="index.html">homepage</A>
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/links.htm">links</A> 
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/searengi.htm">search_forms</A>

<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/orc.htm">+ORC</A>
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/student.htm">students' essays</A>
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/academy.htm">academy database</A>
<br>
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/realicra.htm">reality cracking</A>
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/howtosea.htm">how to search</A>
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/javascri.htm">javascript wars</A>
<br>
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/tools.htm">tools</A>
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/noanon.htm">anonymity academy</A> 
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/cocktail.htm">cocktails</A>
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="http://fravia.net/ideale.htm">antismut CGI-scripts</A>

<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/info.htm">mail_fravia+</A>
<br>
<IMG SRC="https://searchlores.nickifaulk.com/protec/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 
BORDER=0 VSPACE=0 HSPACE=0><A HREF="https://searchlores.nickifaulk.com/protec/legal.htm">Is reverse engineering legal?</A>
</CENTER>
<hr>
<!-- THAT'S ALL, THANKS A LOT this will allow automated retrieval -->
</BODY>
</HTML>


