<HTML>
<HEAD>
<TITLE>rt_bot1.htm The HCUbot: a simple Web Retrieval
Bot in Perl</TITLE>
</HEAD>

<BODY BGCOLOR="#CCCCCC" TEXT="#001010" VLINK="#3366CC" LINK="#0000FF" ALINK="#00FF00">
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1"
WIDTH= "100%"  HEIGHT="26">
<TR><td></td>
<td>
<!-- Choose  a TITLE probably wont be changed -->
<center><FONT SIZE="+2">The HCUbot: a simple Web
Retrieval Bot in Perl</fonT><br>
        <FONT SIZE="+1"></fonT>
</center>
</td>

<td>
<!-- Choose  a PROJECT GIF, leave this if unsure -->
<center><a href="bots.htm"><img SRC="https://searchlores.nickifaulk.com/images/botstart.gif"
ALT="bots" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=1
VSPACE=0
HSPACE=0></a><br><font color=gray>Bots section</FonT>
<br><bR></center>
</center></td></tr>
<tR>
<td bgcolor="#FFFFEA"><center>
<FONT COLOR="890000">
<!-- CHOOSE A DATE (will probably be changed) -->
20 July 1999
</FONT></center>
</td>
<td bgcolor="#FFFFEA"><center>by <font size=+3>
<!-- CHOOSE A HANDLE (wont be changed) -->
deep</font><br>
<font size=+1>(with corrections by <font
color=blue>[blue]</font>)
</fonT></center>
</td>
<td VALIGN="center" bgcolor="#FFFFEA">
<!--
<a href="hcu98_3.htm"
tppabs="<a
href="<a href="http://www.fravia.net/hcu98_3.htm" target=_blank>http://www.fravia.net/hcu98_3.htm</a>"><IMG
SRC="hcu1.gif"
ALT="+cracker" ALIGN=BOTTOM
WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>
-->
</td>
</tr>
<TR><td><center><a href="index.htm"><IMG
SRC="images/bulletr.gif"

ALIGN="BOTTOM"
BORDER="0" VSPACE="0" HSPACE="0"></a></center></td>
<TD BGCOLOR="898030"><center>Courtesy of Fravia's searchlores.org</center>
</center></TD>
<td BGCOLOR="898030">
</td>
</TR>

<tr><td><font
color="#C4C0CF">fra_00xx<bR>98xxxx<br>deep<br>1000<br>BO<br>PC<br></fonT></td><td><i><center>
A great essays for all those that want to begin their
travel in the beautiful land of the
bots. The "HCUbot" described here is a full working
automated bot that you'll be able (once
you have learned some Perl, that is) to ameliorate or
modify at leasure. It's like with
lego-blocks. This is the first platform, you'll build
on this all the colour you want.
</i></center></td>
<td></td>
</tr>
<TR><td></td>
<!-- Leonard Coehn's old song, because we are poets,
not only crackers -->
<TD BGCOLOR="898030"><center></i><b>There is a crack,
a crack in everything
That's how the light gets in</b></center>
<!-- Leonard Coehn's old song, because we are poets,
not only crackers -->
</center></TD><td></td>
</TR>
<TR>
<td bgcolor="#C6E7C6"><font
color=blue><center>
Rating</FONT></FONT></center>
</TD>
<td  bgcolor="#C6E7C6"><font
color=blue><center>
<!-- CHOOSE A RATING (may be changed) -->
(x)<B>Beginner</B> ( )<B>Intermediate</B> (
)<B>Advanced</B> ( )<B>Expert</B></FONT>
</center></td>
<td></td>
</tr>
</table>
<!-- END HEAD  -->
<bR>
<!-- CORPUS  -->

<!-- CHOOSE A COMMENT (may be changed)  -->


<hR>
<center>
   <FONT SIZE="+2">
<!-- CHOOSE A TITLE (wont probably be changed) -->
Simple Web Retrieval Bot in Perl
   </FONT><BR>
   <FONT SIZE="+2">
<!-- CHOOSE A SUBTITLE (wont proabbly be changed) -->

   </FONT><BR>
   <FONT COLOR="0B7FC1">
<!-- REPEAT YOUR CHOSEN HANDLE HERE -->Written by
deep
   </FONT>
</center><br><br>

<!-- INTRO STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1"
WIDTH= "100%"  HEIGHT="26" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font
color=blue>Introduction</fonT>
</fonT></center></td></tr></table>
<center>
<P>
I like Perl, I've been learning it for a while. It's a
good language to learn - fairly
straightforward, quick, very powerful and ideal for
bots, cgi and the net generally! I
hope that +fravia will publish this as part of the
botstart section and that the bot
section will start boting - it's my very first bot.
Most of the source code is included -
it's yours for a little work. </center> <br><br>
<!-- TOOLS STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1"
WIDTH= "100%"  HEIGHT="26" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font
color=blue>Tools required</fonT>
</fonT></center></td></tr></table>
<P>
Perl (standard on Linux and freely available) and
various Perl modules (small, free
downloads),<BR>
net access,<BR>
a text editor,<BR>
Linux (not absolutely necessary, but it's far
superior, free and a real operating system).
<br><br>


<!-- REAL ESSAY  STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1"
WIDTH= "100%"  HEIGHT="26" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font
color=blue>Essay</fonT></fonT>
</center></td></tr></table>

<P>
What can I say about Perl? It's a good language to
learn. Virtually all cgi is done in
Perl but it's good for virtually anything that you'd
care to do and it's possible to
develop applications very quickly. I'm not yet that
experienced at Perl - this is my first
'real' app and I'm certain that this bot is not
written at all well, but it is
written. Perhaps that's the best thing about Perl - it
enables you to do things that would
not otherwise be possible. The CPAN Perl code
repository on the net holds vast quantities
of free code to do almost anything you could ever wish
- but you have to be able to use
Perl. You will need to download at least the LWP (it
stands for libwwwperl) modules from
CPAN for HCUbot or any Perl bot to work. <P> There are
many Perl bots available on the
net, but I'm fairly certain that you will not find one
that does exactly what you want.
There's also a convention amoung bot writers not to
give bots to people who do not
understand them - it's considered irresponsible. Of
course, once you've learned how to
build bots, you can be as irresponsible as you like.
What all this means is that you have
to learn to appreciate them and Perl or you don't
deserve them. Don't worry, it's easy
enough - just a little effort.
<P>
Please note that this is not good Perl code and I am
not a programmer. Rather it shows
that to start using Perl you only need to understand
scalars, arrays, hashes and regexes.
I hope that HCUbot is replaced soon with a better
HCUbot2 that shows me how it should be
done.
<P>
What I've done is
provide most of the source to
'HCUbot' - a very simple web retrieval bot that
retrieves many web pages from a single
site. What's missing is the code to call subroutines
and pass arguments to them. The idea
is that by assembling the bot you will earn the right
to use it. Those familiar with a C,
C++ or Java will have very little difficulty. This bot
is fairly limited in what it can
achieve, (and bots can do far more than download web
pages) but you are free to add any
functionality you like - just write the code.
<P>
To get a taste of Perl, take a look at this. It's a
very simple script I knocked together
to convert Perl's 'pod' documentation
to plain text. It's not actually necessary as there is
already a pod-text conversion
utility available, but I was practicing my regexes.
<P>
<PRE>
##### Strips formating characters from pod documents
##### so that plain(er)txt is achieved
#!/usr/bin/perl -w

use diagnostics;
$infile="$ARGV[0]";
$outfile="/output.txt";
open (INFILE,"<$infile");
open (OUTFILE,">$outfile");
while(<INFILE>) {
        # needs to handle all these '=item *', '=over
4', '=head1 DESCRIPTION
        #  '=cut', '=item $ua = LWP::Robot ...', etc
        s/^=\w+\s*[\d|\s|\*]*//og;  # removes things
starting =
        s/\w*<(.+?)>/$1/og;   # removes &amp;lt; and &amp;gt;
around terms and preceeding letters.

           # These are 'regular expressions' or
'regex(es)' - it may
           # look scary, but it's actually very simple
when you
           # understand how and they're very powerful.
print OUTFILE;
        }

</PRE>
<P>
Now take a look at this. All Perl tutorials say that
there are many ways to achieve what
you want. I wanted to process all the files in a
directory with a certain file
extension. <PRE>

sub process_files {
        my ($dir) = _@;
        opendir(DIR, $dir) or die " $0: Can't open
$dir: $! \n" ;
        @files = readdir DIR;   # @files contains
every file in the directory

foreach $file(@files)   {
        if ($file !~ /^\d+\.ext$/o)      # regex
filters @files so that
                {next;}
        push (@extfiles, $file);         # @extfiles
contains only .ext files
        #       print "dev - pushed $file\n";
        }

# open each file for processing
foreach $file(@files) {

        open(FILE,"> $file") or die "$0: Unable to
open file $file - $!\n";
        # do something to file
        close FILE;
        }
closedir DIR;
}

</PRE>
Or, the second attempt.
<PRE>

sub process_files {

        my ($dir) = @_;
        opendir(DIR, $dir) or die " $0: Can't open
$dir: $! \n";

        # don't need @files array at all

        while ($file = <*.ext>) {
                open(FILE,"> $file") or die "$0:
Unable to open file $file - $!\n";
                # do something to file
                close FILE;
        }
closedir DIR;
}
</PRE>

But the best way is like this,

<PRE>
sub process_files {

        my ($dir) = @_;
        opendir(DIR, $dir) or die " $0: Can't open
$dir: $! \n";

@files = glob("*.ext");         # Easy when you know
how, eh?

foreach $file(@files) {
        open(FILE,"> $file") or die "$0: Unable to
open file $file - $!\n";
                # do something to file
        close FILE;
        }
closedir DIR;
}

</pre>
Very soon after Fravia published this essay, the
following comments and corrections by
<font color=blue>[blue]</font> were posted to his
messageboard.
I am very pleased to
include these corrections and welcome others. Four
ways to achieve the same thing.

<P> <i>
<pre>
       1. It's always better to directly parse
directory list:

       from perlop

       chmod 0644, <*.c>;

       Because globbing invokes a shell, it's often
faster to call readdir() yourself
       and do your own grep() on the filenames.
Furthermore, due to its current
       implementation of using a shell, the glob()
routine may get ``Arg list too long''
       errors (unless you've installed tcsh(1L) as
/bin/csh).


       I think the best way to parse the directory is
       something like this:

       opendir(DIR, $path) || die "Can't open $path:
$!";

       # Avoid "." and ".."
       @files=grep( !/^\./, readdir(DIR) );

       closedir(DIR);


       Any decent operating system implementing a file
system cache will anyway read
       entire directory.


       2. Speaking about Win32 ActivePerl is
absolutely compatible and BTW there is Perl
       on almost ant OS you can think of.




       [blue]

</pre>
</i>
</PRE>
<P>
OK, here's HCUbot's. HCUbot is written as a Linux
application -
it will need work to work on windoze (I've not used
Perl over
windoze - I think that it needs explicit sockets
programming). <font
color=red>Correction!</font> <font
color=blue>[blue]</font> states above that Perl for
windoze (ActivePerl) is absolutely compatible. I've
downloaded ActivePerl (1.5 meg) and
I'm going to give it a go. <P>
HCUbot produces many messages for help in development.
You will see the headers sent to
the server and the response headers back. I redirect
the output to a file like this 'perl
HCUbot www.orasomename.com > /tmp/BOTtestoutput' or
the messages to the screen are
overwhelming.
<P>
Perl helps you all the way with excellent error
messages. You can write it cryptically
or you can write it simply. I'm going to write it
simply until I learn more - this code
is quite clear to me. Use 'use diagnostics' and the -w
switch only while developing -
they can cause strange messages to be sent to servers.
If something doesn't work, try it a
slightly different way. I tend to use print statements
to identify where perl fails (you
may have noticed ;) and it seems to work well but
there's also a very good debugger built
in.
<P>
There are notes after the source to explain what's
happening.


<PRE>

#!/usr/bin/perl -w # remove -w switch after sorting
use diagnostics;  # for development, remove after
sorting       
    # use strict; hmm   
use HTTP::Status;
use HTTP::Response;
use LWP::RobotUA;       # haha! did it
use URI::URL;
use HTML::Parse;
use vars qw($opt_h);    # needs work
use Getopt::Std;

my $url;

print "dev - $0 started - initialising variables.\n";

 my $arg = (shift @ARGV);
 my $domain_name = "http://".$arg."/";

 print "dev - \$domain_name is $domain_name\n";
 local @get_list = $domain_name;                # is
this ok???  # Yes
 print "dev - \@get_list is @get_list\n";
 local %hcuing = ();
 print "dev - \%hcuing is initialised as ()\n";
  # referer section
 local %referer = ();
 print "dev - \%referer is initialised as ()\n";
 local $counter = 0;   # for naming locally-stored
files
 print "dev - \$counter is $counter\n";

 local $maxcount = 15;
 my $mirror = 0;




         
########################################################

         ###     N.B.  SUBROUTINES CALLED FROM THIS
BLOCK      ###

&amp;amp;change_dir($arg);

        while (($url = shift @get_list) &amp;amp;&amp;amp;
($counter < $maxcount))      {

                #####  INSERT   #####

                 ###    CODE    ###

                ####    HERE    ####


        }  ##  while there are URLs to fetch


&amp;amp;shut_down; #not strictly necessary (helps
development, or helped me)

        ###     N.B.  SUBROUTINES CALLED FROM THIS
BLOCK      ###




                ##  print_help() er, prints help
###########

sub print_help {
  print << "HELP";

usage: $0 [-h] domain-name

 -h help

Example:  $0 www.ora.com

HELP
}



                ## change_dir, change to user's home
directory  ###


sub change_dir {


        my ($dirname) = @_;

        $dirname =~ /http:\/\/(\w+)/;
        print "dev - \$dirname to be created is
$dirname\n";
        # change to user's home directory
        chdir();
        my $pwd = `pwd`;
        print "dev - changed to user's home directory.
Directory is $pwd\n";

        # makedir beneath user's home directory with
appropriate permissions
        if (! ( -d $dirname))   {
                mkdir($dirname,0660) or die "Unable to
create directory $dirname  $!\n";
                print "dev - created directory
$dirname\n";
        }

        # move into that directory - will be
creating/renaming files
        chdir($dirname);
        $pwd = `pwd`;
        print "dev - changed to directory $pwd";

return 0;
}






                ##   get_html() retrieves html pages
######

sub get_html() {


  my($url) = @_;

  print "dev - in sub get_html()\n";

# Create a User Agent object

                # your email address here ~ be
responsible ~
$ua = new LWP::RobotUA
'HCUbot','<a href="https://searchlores.nickifaulk.com/ym/Compose?To=jclinton@whitehouse.gov&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">jclinton@whitehouse.gov</a>';
$ua->delay(0.01);     # short delay but probably
enough

# Ask the User Agent object to request a URL.
# Results go into the response object (HTTP::Reponse).

  my $request = new HTTP::Request('GET', $url);
  print "dev - \$url is $url\n";

        if (defined $referer{$url}) {           #
referer implementation, works
                $ref = $referer{$url};
                $request->referer($ref);

                }

   my $response = $ua->request($request);

  #####  for development/debugging purposes #######
  print "\ndev - \$request>as_string is \n";
  print $request->as_string;
  print "\ndev - \$response->as_string is \n";
  print $response->as_string;
  #####  for development/debugging purposes #######

  return ($response->code, $response->content_type,
$response->content);

}


                ##  not_good()  ############
                ## checks that page was received ok
and that it is html   #####

# returns 1 if the request was not OK or HTML, else 0

sub not_good {


    my ($code, $type) = @_;

    print "dev - in sub not_good \n";

    if ($code != RC_OK) {
      print "$url had response code of $code";
    return 1;
    }

    if ($type !~ /text\/html/) {
      warn("$url is not HTML.");
    return 1;
   }
return 0;   # return false (0) if document is ok
}




                ##   save_html()   #########

sub save_html {


my ($url,$data) = @_;

print "dev - in sub save_html \n";
$counter++;

        open(SAVEFILE,">$counter.ext")
                or die "unable to save file $url as
$counter.ext \n";
                print SAVEFILE $data;
        close SAVEFILE;

        # save %hcuing hash entry for $url and
local($counter) filename
        # Hash entry now defined as well as existing
        $hcuing{$url} = "$counter\.ext";

        print "dev - \%hcuing key $url given value
$counter\.ext\n";

return 0;
}





                ##    extract_hyperlinks()   #######
  ##   extracts relative urls, calls absolutise_url()


sub extract_hyperlinks {

  my ($data, $url) = @_;

  print "dev - in sub extract_hyperlinks \n";


my $parsed_html=HTML::Parse::parse_html($data);

  for (@{ $parsed_html->extract_links(qw (a)) }) {
    my ($link) = @$_;
    my ($absolute_link) = absolutise_url($link, $url);

      #   only interested in     i. same-domain
     ##                      and
    ####    ii. non-queued or fetched hyperlinks
   #####  This is the second filter for documents to
retrieve

        if (($absolute_link =~ /$domain_name/o)
                &amp;amp;&amp;amp;       (! exists
$hcuing{$absolute_link}))    {

                # queue for retrieval
                push (@get_list, "$absolute_link");
                # create but not define hash entry so
that url is only queued once
                $hcuing{$absolute_link} = "";
                print "dev - \%hcuing key
$absolute_link created. \n";

            # referer hash
                $referer{$absolute_link} = "$url";
                print "dev - \%referer key
$absolute_link with value $url created. \n";
                        }

                }
  $parsed_html->delete(); # manual garbage collection

return 0;

}




                ##   converts relative to absolute
urls   ######

sub absolutise_url() {

        my ($partial, $model) = @_;

        print "dev - in sub absolutise_url()\n";

    my $url = new URI::URL($partial, $model);
    my $absolutised = $url->abs->as_string;

    ## URI::URI returns duplicated urls - filter
further #!###

        #!~    THIS REGEX IS IMPORTANT    ~!#

         #!~   - first filter for queuing docs for
retrieval    ~!#
        # must have extension htm(l)
        # tried /html*#{0}/ and /html*[^#]/

        if  ( $absolutised =~ /htm[^#]*$/ )     {
                print "dev - absolutise_url()
returning: $absolutised. \n";
        return $absolutised;

        } else {
                print "dev - absolutise_url()
returning null: (not $absolutised). \n";
        # want to return null - will this work? yes
        return  $absolutised = "";

        }
}


                ##  shut_down  ##########
                ##  for development use

sub shut_down {         ## there's probably a name for
this by convention
                                      ## yeah,  maybe
shut_down
 print "dev - in END section\n";


open(SAVEHASH,">hcuing") or die "unable to open hcuing
hash file for saving.\n";
print SAVEHASH %hcuing or die "unable to print hcuing
hash file to disk. \n";
close SAVEHASH;

open(SAVEGETLIST,">getlist") or die "unable to open
getlist file for saving.\n";
print SAVEGETLIST @get_list or die "unable to print
\@getlist to disk. \n";
close SAVEGETLIST;

open(SAVEGETLIST,">referer") or die "unable to open
referer file for saving.\n";
print SAVEGETLIST %referer or die "unable to print
\@referer to disk. \n";
close SAVEGETLIST;

        # print each %hcuing key-value pair
        foreach $k (sort keys %hcuing)  {
                print "dev - \%hcuing $k =>
$hcuing{$k}\n";
                }

        # print each %referer key-value pair
        foreach $k (sort keys %referer)         {
                print "dev - \%referer $k =>
$referer{$k}\n";
                }

}

# possible enhancements
# edit documents so links point to local copies
# scope properly
# enhance that regex
# mirroring facility

</PRE>
<P>
HCUbot is replacing a browser, sending requests for
web pages and receiving responses.
HCUbot can even pretend to be a browser - any browser
you like. This line
<P>
$ua = new LWP::RobotUA '<font
color=red>HCUbot</font>','<a href="https://searchlores.nickifaulk.com/ym/Compose?To=jclinton@whitehouse.gov&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">jclinton@whitehouse.gov</a>';
<P>
 identifies HCUbot as HCUbot, while the jclinton... is
the email address the server
administrator should contact if your bot screws up his
server - she'll send you an awfully
polite email. So to pretend to be a particular
browser, you would replace HCUbot with
something like "Mozilla/3". You'll have to check the
actual string that the
browser actually sends.
<P>
HCUbot sends a GET command to the server. It says that
it wants particular web pages by
saying GET this url with the url of the document that
you're after. There are other
commands - MIRROR (did you notice that my $mirror = 0;
variable
at the initialising variables section?), HEAD, POST
and a few others.
Mirror compares the document on the server with your
local document. If the server's
document is newer or has a different size, that
document is retrieved. Mirror works by
sending a HEAD request that retrieves headers for the
document. The header contains the
size of the document and the date that it was last
amended. If the document needs
retrieving, your machine decides to fetch it. That my
$mirror = 0;
variable initialisation is for HCUbot to mirror
documents (not yet implemented).
<P>
Let's take a look at some headers that HCUbot works
with.
<P>
<PRE>
dev - in sub get_html()                     ##
messages starting "dev - ..." are produced by
dev - $url is <a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>         ## HCUbot
so that you know what's happening.               


dev - $request&amp;gt;as_string is
GET <a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>                            
         # Here's the request header
From: <a href="https://searchlores.nickifaulk.com/ym/Compose?To=jclinton@whitehouse.gov&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">jclinton@whitehouse.gov</a>
User-Agent: hcuBOT



dev - $response-&amp;gt;as_string is
HTTP/1.1 200 OK                                   #
Here's the response header, that we
Cache-Control: public                               #
get back from the server                  
Date: Thu, 20 Jul 1999 20:18:19 GMT
Accept-Ranges: bytes
Server: Oracle_Web_Listener/4.0.7.1.0EnterpriseEdition
Allow: GET, HEAD
Content-Length: 12723
Content-Type: text/html
ETag: "8ef7c2d83beac682e5b0bb90ecc3791a"
Last-Modified: Thu, 20 Jul 1999 16:31:27 GMT
Client-Date: Thu, 20 Jul 1999 23:28:07 GMT
Client-Peer: 205.207.44.16:80
Title: Oracle Corporation - Home
X-Meta-Description: Oracle Corp. (Nasdaq: ORCL) is the
world's leading
 supplier of software for enterprise information
management.
X-Meta-Keywords:
database,software,Oracle,Oracle8i,relational server,
 server,application,tools,decision support
tools,internet,internet computing,
 CRM,customer relationship
management,e-business,PL/SQL,XML,Year 2000,Euro, Java,
technology


&amp;lt;html&amp;gt;            # and the html document
requested with a GET starts here.
</PRE>
<P>
Quite a whopper that response header, they're not
normally that big. The request is simple
on this one, it's <a href="https://searchlores.nickifaulk.com/ym/Compose?To=jclinton@whitehouse.gov&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">jclinton@whitehouse.gov</a> saying GET
<a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a> using
User-Agent: hcuBOT.
<P>
The important part of the response is the first line
<font color=red>"HTTP/1.1 200
OK"</font>. <P>
Hypertext TransferProtocol (HTTP) will either be 1.1
or 1.0. Version 0.9 only supports
the GET method and is not used now as far as I'm
aware. 1.0 supports GET, HEAD, POST,
PUT, DELETE, LINK and UNLINK. 1.1 supports a few extra
methods. This header says that it
will accept HEAD and GET requests.
<P>
An important part is the response code. We want
response code 200
as shown here which is the server replying "OK, here's
the document you asked for".
Response codes 100 to 199 are not implemented. 200 is
what we want. 200-299 are request
successfull, but that doesn't really mean that you'll
get the document. 300-399 are
redirection which can cause a bit of trouble. 400 is
bad request (syntax error in the
request header), 404 is document not found - just like
when you click on a stale link. 400
- 499 you don't want. Server Errors are the 500 range
which you don't want. 500 is
internal server error, one that you don't want but
will get often. I implemented the
referer in HCUbot to try to avoid RC500s and made some
other changes. The referer is the
page that gave us the link. You'll sometimes get the
document even with a RC500.
<P>
Here's a request header with a referer. It's saying "I
want
<a href="http://www.oracle.com/html/custcom.html" target=_blank>http://www.oracle.com/html/custcom.html</a>, I got this
url from <a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>".
<PRE>
dev - $request-&amp;gt;as_string is
GET <a href="http://www.oracle.com/html/custcom.html" target=_blank>http://www.oracle.com/html/custcom.html</a>
From: <a href="https://searchlores.nickifaulk.com/ym/Compose?To=jclinton@whitehouse.gov&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">jclinton@whitehouse.gov</a>
Referer: <a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>
User-Agent: hcuBOT



dev - $response-&amp;gt;as_string is
HTTP/1.1 200 OK
Date: Thu, 20 Jul 1999 20:18:23 GMT
Server: Oracle_Web_Listener/4.0.7.1.0EnterpriseEdition
Allow: GET, HEAD
Content-Type: text/html
Client-Date: Thu, 20 Jul 1999 23:28:11 GMT
Client-Peer: 205.207.44.16:80
Title: Oracle Corporation - Customers.com

&amp;lt;html&amp;gt;            # HTML document follows
</PRE>
<P>
In HCUbot there's this code to test if the document
was received OK (response code 200)
and that it's html
<PRE>

if ($code != RC_OK) {
      print "$url had response code of $code";
    return 1;
    }

    if ($type !~ /text\/html/) {
      warn("$url is not HTML.");
    return 1;
   }
return 0;   # return false (0) if document is ok
}

</PRE>
Back to HCUbot. HCUbot uses the LWP (it stands for
libwwwperl) perl module which is a
predefined linbarary of code that deals with net
protocols. So, to write a bot in C++, for
example, you'd want to use a networking library to
include just like iostream.h and math.h
are used. What happens is your program calls on
functions in these stored libraries. LWP
relieves the programmer (that's me or you) of sockets
programming. A socket is how you
program the net - you read and write to a socket like
you would read or write to a file
except that it's more complex. Socket programming
allows more control.
<P>
Specifically, HCUbot uses LWP::RobotUA, robot user
agent which is an appropriate module
for web robots. RobotUA is often called 'polite'
because it's careful not to aggrevate
servers. In particular it delays requests to the
server. The default, however, is one
minute which I think is far too long for today's
servers.
<P>
This is how HCUbot works.
<UL>
<LI>You feed HCUbot a url to start at. In the first
request
header above, the starting url was www.oracle.com.
<LI>Tebot requested this page as GET
<a href="http://www.oracle.com" target=_blank>http://www.oracle.com</a>
<LI>and it was retrieved successfully, RC 200 OK.
<LI>HCUbot tests that retrieved document is OK.
<LI>HCUbot saves the document to disk.
<LI>HCUbot extracts from that document links to other
documents - these are the links
that you would click on in your browser.
<LI>HCUbot makes these links absolute - HTML pages can
have abbreviated hyperlinks.
<LI>HCUbot filters - only want HTML. The regex's
marked   #!~    THIS
REGEX IS IMPORTANT ~!#  decides on documents to queue.
If you wanted jpgs or zips, you
would change this regex for jpegs or zips.
<LI>HCUbot decides which documents to queue for
retrieval. It decides on documents within
the same domain and not already queued or retrieved.
<LI>Repeats until stops for some reason.
</UL>
and that's about the size of it. To finish, here's
some of the messages HCUbot produces
<PRE>


dev - in 'MAIN'calling get_html section
dev - in sub get_html()
dev - $url is
<a href="http://www.oracle.com/cgi-bin/press/printpr.cgi?file=199907191000.18885.html&mode=corp" target=_blank>http://www.oracle.com/cgi-bin/press/printpr.cgi?file=199907191000.18885.html&mode=corp</a>

dev - $request-&amp;gt;as_string is
GET
<a href="http://www.oracle.com/cgi-bin/press/printpr.cgi?file=199907191000.18885.html&mode=corp" target=_blank>http://www.oracle.com/cgi-bin/press/printpr.cgi?file=199907191000.18885.html&mode=corp</a>
From: <a href="https://searchlores.nickifaulk.com/ym/Compose?To=jclinton@whitehouse.gov&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">jclinton@whitehouse.gov</a>
Referer: <a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>
User-Agent: hcuBOT



dev - $response-&amp;gt;as_string is
HTTP/1.1 200 OK
Date: Thu, 20 Jul 1999 20:18:44 GMT
Server: Oracle_Web_Listener/4.0.7.1.0EnterpriseEdition
Allow: GET, POST
Content-Type: text/html
Client-Date: Thu, 20 Jul 1999 23:28:32 GMT
Client-Peer: 205.207.44.16:80
Title: Press Release

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Press
Release&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body bgcolor="#ffffff"&amp;gt;
&amp;lt;!--header--&amp;gt;
&amp;lt;table width=600 cellpadding=0 cellspacing=0
border=0&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td colspan=2 align=right&amp;gt;
&amp;lt;map name="top"&amp;gt;
&amp;lt;area shape="rect" coords="0,0,140,25" href="/"
target="_top"&amp;gt;
&amp;lt;area shape="rect" coords="343,1,385,23"
href="/"target="_top"&amp;gt;
&amp;lt;area shape="rect" coords="386,1,441,23"
href="/html/sitemap.html" target="_top"&amp;gt;
&amp;lt;area shape="rect" coords="442,1,503,23"
href="/html/siteidx_frame.html" target="_top"&amp;gt;
&amp;lt;/map&amp;gt;
&amp;lt;img width=528 height=28
src="/templates/images/hdr_top.gif" usemap="#top"
border=0
alt="home,site map,site index"&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td valign=top rowspan=2&amp;gt;
&amp;lt;a href="/ebusiness/" target="_top"&amp;gt;
&amp;lt;img width=72 height=56
src="/templates/images/hdr_eb.gif" border=0 alt="#1
e-business"&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;

&amp;lt;tr&amp;gt;&amp;lt;td valign=top width=203&amp;gt;
&amp;lt;div class="search"&amp;gt;
&amp;lt;FORM method=GET
action="<a href="http://orasearch.oracle.com/cgi-bin/query" target=_blank>http://orasearch.oracle.com/cgi-bin/query</a>"&amp;gt;
&amp;lt;INPUT TYPE=hidden NAME=mss VALUE=simple&amp;gt;
&amp;lt;INPUT TYPE=hidden  NAME=pg VALUE=q&amp;gt;
&amp;lt;INPUT TYPE=hidden NAME=fmt VALUE=.&amp;gt;
&amp;lt;INPUT TYPE=hidden NAME=what VALUE=web&amp;gt;
&amp;lt;INPUT NAME=q size=10 maxlength=800
VALUE=""&amp;gt;&amp;lt;INPUT
TYPE="image" src="/templates/images/search_btn.gif"
width=36 height=18 value="go" border=0&amp;gt;
&amp;lt;/FORM&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td valign=top align=right width=397&amp;gt;
&amp;lt;map name="tabs"&amp;gt;
&amp;lt;area shape="rect" coords="5,0,84,16"
href="<a href="http://oraclestore.oracle.com" target=_blank>http://oraclestore.oracle.com</a>" target="_top"&amp;gt;
&amp;lt;area shape="rect" coords="85,0,168,16"
href="/download/" target="_top"&amp;gt;
&amp;lt;area shape="rect" coords="169,0,219,16"
href="/support/" target="_top"&amp;gt;
&amp;lt;area shape="rect" coords="200,0,259,16"
href="/cgi-bin/press/pr.cgi" target="_top"&amp;gt;
&amp;lt;area shape="rect" coords="260,0,309,16"
href="/corporate/seminars_and_events/"
target="_top"&amp;gt;
&amp;lt;area shape="rect" coords="310,0,392,16"
href="/siteadmin/html/contactus.html"
target="_top"&amp;gt;
&amp;lt;/map&amp;gt;
&amp;lt;img width=397 height=28
src="/templates/images/hdr_tab.gif" usemap="#tabs"
border=0
alt="Main Navigation Bar"&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;table width=560&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;
&amp;lt;img ALIGN=center WIDTH=246 HEIGHT=40
SRC="/corporate/press/images/pr_ban.jpg"
ALT=""&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;form action="pr.cgi" method="post"&amp;gt;
&amp;lt;INPUT TYPE="HIDDEN" NAME="status"
VALUE="Search"&amp;gt;
&amp;lt;div align=right&amp;gt;&amp;lt;INPUT TYPE="SUBMIT"
VALUE="Return to Corporate Press Release Index"&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;h2&amp;gt;Oracle Capitalizes on Enterprise Demand for
Linux Offerings with Announcement of Oracle 8i on
Linux&amp;lt;/h2&amp;gt;
(July 19, 1999)&amp;lt;p&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;B&amp;gt;Contact(s):&amp;lt;/B&amp;gt;&amp;lt;TABLE
WIDTH=100%&amp;gt;&amp;lt;TR&amp;gt;&amp;lt;TD VALIGN=TOP
ALIGN=LEFT&amp;gt;&amp;lt;FONT SIZE=-1&amp;gt;Reema
Bahnasy&amp;lt;BR&amp;gt;Oracle
Corp.&amp;lt;BR&amp;gt;650/506-3397&amp;lt;BR&amp;gt;&amp;lt;A
HREF="mailto:<a href="https://searchlores.nickifaulk.com/ym/Compose?To=rbahnasy@us.oracle.com&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">rbahnasy@us.oracle.com</a>"&amp;gt;<a href="https://searchlores.nickifaulk.com/ym/Compose?To=rbahnasy@us.oracle.com&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">rbahnasy@us.oracle.com</a>&amp;lt;/A&amp;gt;&amp;lt;/FONT&amp;gt;&amp;lt;/TD&amp;gt;&amp;lt;TD
VALIGN=TOP ALIGN=LEFT&amp;gt;&amp;lt;FONT SIZE=-1&amp;gt;Karesha
McGee&amp;lt;BR&amp;gt;Applied
Communications&amp;lt;BR&amp;gt;415/365-0202&amp;lt;BR&amp;gt;&amp;lt;A
HREF="mailto:<a href="https://searchlores.nickifaulk.com/ym/Compose?To=kmcgee@appliedcom.com&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">kmcgee@appliedcom.com</a>"&amp;gt;<a href="https://searchlores.nickifaulk.com/ym/Compose?To=kmcgee@appliedcom.com&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">kmcgee@appliedcom.com</a>&amp;lt;/A&amp;gt;&amp;lt;/FONT&amp;gt;&amp;lt;/TD&amp;gt;&amp;lt;/TR&amp;gt;&amp;lt;/TABLE&amp;gt;&amp;lt;P&amp;gt;

&amp;lt;P&amp;gt;
Early Adopters Programs Draws Nearly 20,000 Developers

&amp;lt;P&amp;gt;
REDWOOD SHORES, Calif., July 19, 1999-&amp;lt;A
HREF="<a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>"&amp;gt;Oracle
Corporation&amp;lt;/A&amp;gt;, the number one
choice for e-business, today announced dramatic growth
and demand for Oracle
on Linux with strong adoption in both enterprise and
general business markets.
 Oracle also announced the general availability of
Oracle8i(TM) on Linux, after a
successful early adopter's program.
&amp;lt;P&amp;gt;
   Since &amp;lt;A HREF="<a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>"&amp;gt;Oracle
Corp.&amp;lt;/A&amp;gt; announced Oracle8 on Linux, there have
been over
50,000 downloads from Oracle(R) Technology Network
(&amp;lt;A
HREF="<a href="http://technet.oracle.com/" target=_blank>http://technet.oracle.com/</a>"&amp;gt;<a href="http://technet.oracle.com/</A>" target=_blank>http://technet.oracle.com/</A></a>
).  Now, after the announcement of Oracle8i , there
have been nearly 20,000
registrants for early access in the first few weeks. 
Outside the development
community, Oracle has also seen overwhelming customer
adoption with an excess
of 800 paying customers today-over half of these
orders from enterprise
accounts and the remainder from small to mid-sized
businesses and
organizations.
&amp;lt;P&amp;gt;
   "Until the availability of Oracle database on
Linux, we either had to
rely on NT or use one of the shareware database
servers available for Linux,"
says Jonathan August, President and CEO of
Internection, Inc., a company
providing customized Internet services solutions to
businesses, including web
hosting and e-commerce solutions.  "Neither solution
provided us the security,
performance, manageability or reliability required by
our customers.  Oracle
brings enterprise credibility and robustness to our
products.  As a result,
we've gained access to customers ranging from small
businesses to Fortune 100
enterprises like Prudential and Pfizer.  Our total
revenue since the
additional of Oracle on Linux has increased by 250
percent."
&amp;lt;P&amp;gt;
   "Oracle on Linux combines enterprise level
reliability, scalability
and performance with a free, robust and well supported
operating system," says
Nick Marden, technical director of e-commerce,
Xoom.com, and e-commerce
service provider.  "It enables Xoom.com to better
understand our members'
needs and respond to them quickly.  Oracle on Linux
represents an
extraordinary value and it gets the job done."
&amp;lt;P&amp;gt;
   "Oracle is committed to bringing superior
technology to the Linux
community," says Chuck Rozwat, senior vice president
of Server Technologies at
Oracle.  "Oracle8i on Linux comes with both Java and
XML built right in.
Together they offer the most cost-effective way to
deploy scalable Internet
applications."
&amp;lt;P&amp;gt;
   Oracle8i is the first and only database
specifically designed for the
Internet.  Oracle8i extends Oracle's long-standing
technology leadership in
the areas of data management, transaction processing
and data warehousing to
the new medium of the Internet.  Oracle8i is the
centerpiece of Oracle's
Internet Platform, which also includes Oracle
Application Server and Oracle's
Internet development tools.
&amp;lt;P&amp;gt;
   Oracle Corporation is the world's leading supplier
of software for
information management, and the world's second largest
software company.  With
annual revenues of more than $8.8 billion, the company
offers its database,
application server, tools and application products,
along with related
consulting, education and support services, in more
than 145 countries around
the world.
&amp;lt;P&amp;gt;
   For more information about Oracle, please call
650/506-7000.  Oracle's
World Wide Web address is (URL) &amp;lt;A
HREF="<a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>."&amp;gt;<a href="http://www.oracle.com/.</A>" target=_blank>http://www.oracle.com/.</A></a>

&amp;lt;P&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;CENTER&amp;gt;&amp;lt;STRONG&amp;gt;# #
#&amp;lt;/CENTER&amp;gt;&amp;lt;/STRONG&amp;gt;&amp;lt;P&amp;gt;

&amp;lt;P&amp;gt;
&amp;lt;B&amp;gt;Trademarks&amp;lt;/B&amp;gt;&amp;lt;BR&amp;gt;
Oracle is a registered trademark and Oracle8i is a
trademark or registered
trademark of Oracle corporation.  Other names may be
trademarks of their
respective owners.

&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;body bgcolor="#ffffff" link="000000"&amp;gt;

&amp;lt;img src="/images/line.gif" width=600 height=1&amp;gt;
&amp;lt;br clear=all&amp;gt;
&amp;lt;table width=600 cellpadding=0 cellspacing=0
border=0&amp;gt;

&amp;lt;tr&amp;gt;
&amp;lt;td align="right" width="100"&amp;gt;
&amp;lt;div class="FOOTER"&amp;gt;
&amp;lt;a href="/appserver/"&amp;gt;
&amp;lt;font FACE="Arial, Helvetica" SIZE="1"&amp;gt;
Powered by Oracle Application Server
&amp;lt;/a&amp;gt;&amp;lt;/font&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;/td&amp;gt;

&amp;lt;td align="left" width="50"&amp;gt;
&amp;lt;div class="FOOTER"&amp;gt;
&amp;lt;img src="/images/clear_dot.gif" width=50
height=1&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;/td&amp;gt;

&amp;lt;td width=450&amp;gt;
&amp;lt;div class="FOOTER"&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;font FACE="Arial, Helvetica" SIZE="1"&amp;gt;

        &amp;lt;a href="/" target="_top"&amp;gt;Home&amp;lt;/a&amp;gt;
        | &amp;lt;a
href="/html/sitemap.html"target="_top"&amp;gt;Site
Map&amp;lt;/a&amp;gt;
        | &amp;lt;a href="/html/siteidx_frame.html"
target="_top"&amp;gt;Site Index&amp;lt;/a&amp;gt;
        | &amp;lt;a HREF="<a href="http://orasearch.oracle.com" target=_blank>http://orasearch.oracle.com</a>"
target="_top"&amp;gt;Search&amp;lt;/a&amp;gt;
        &amp;lt;br&amp;gt;
        &amp;lt;a HREF="<a href="http://oraclestore.oracle.com/" target=_blank>http://oraclestore.oracle.com/</a>"
target="_top"&amp;gt;Oracle Store&amp;lt;/a&amp;gt;
        | &amp;lt;a href="/download/"
target="_top"&amp;gt;Free Download&amp;lt;/a&amp;gt;
        | &amp;lt;a HREF="/support/"
target="_top"&amp;gt;Support&amp;lt;/a&amp;gt;
        | &amp;lt;a HREF="/cgi-bin/press/pr.cgi"
target="_top"&amp;gt;News&amp;lt;/a&amp;gt;
        | &amp;lt;a HREF="/corporate/seminars_and_events/"
target="_top"&amp;gt;Events&amp;lt;/a&amp;gt;
        | &amp;lt;a HREF="/siteadmin/html/contactus.html"
target="_top"&amp;gt;Contact Oracle&amp;lt;/a&amp;gt;
        &amp;lt;br&amp;gt;
        &amp;lt;a href="/products/index.htm"
target="_top"&amp;gt;Products&amp;lt;/a&amp;gt;
        | &amp;lt;a href="/services/index.htm"
target="_top"&amp;gt;Services&amp;lt;/a&amp;gt;
        | &amp;lt;a href="/solutions/index.htm"
target="_top"&amp;gt;Business Solutions&amp;lt;/a&amp;gt;
        | &amp;lt;a href="/corporate/oracle_at_work/"
target="_top"&amp;gt;Customer Successes&amp;lt;/a&amp;gt;
        | &amp;lt;a href="/partners/index.htm"
target="_top"&amp;gt;Partners&amp;lt;/a&amp;gt;
        &amp;lt;br&amp;gt;
        &amp;lt;a href="<a href="http://technet.oracle.com" target=_blank>http://technet.oracle.com</a>"
target="_top"&amp;gt;Developers/IT&amp;lt;/a&amp;gt;
        | &amp;lt;a href="/corporate/index.htm"
target="_top"&amp;gt;About Oracle&amp;lt;/a&amp;gt;
        | &amp;lt;a href="/international/html/"
target="_top"&amp;gt;International&amp;lt;/a&amp;gt;
        | &amp;lt;a HREF="/html/employ.html"
target="_top"&amp;gt;Employment&amp;lt;/a&amp;gt;
        | &amp;lt;a HREF="<a href="http://cnn.com/customnews" target=_blank>http://cnn.com/customnews</a>"
target="_top"&amp;gt;cnn custom news&amp;lt;/a&amp;gt;

&amp;lt;br&amp;gt;&amp;lt;p&amp;gt;
&amp;lt;b&amp;gt;Copyright &amp;copy; 1995,1999 Oracle
Corporation.  All Rights Reserved.&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;

&amp;lt;A HREF="/html/copyright.html"&amp;gt;Legal Notices and
Terms of Use&amp;lt;/a&amp;gt;
&amp;nbsp; | &amp;nbsp;&amp;lt;a
href="/html/privacy.html"&amp;gt;PRIVACY
STATEMENT&amp;lt;/a&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;/center&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;

&amp;lt;/table&amp;gt;

&amp;lt;br clear=all&amp;gt;

&amp;lt;table width=600 cellpadding=0 cellspacing=0
border=0&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td align=right&amp;gt;
&amp;lt;a
href="<a href="http://ad.doubleclick.net/jump/www.oracle.com/products/trial/html/trial.html" target=_blank>http://ad.doubleclick.net/jump/www.oracle.com/products/trial/html/trial.html</a>"&amp;gt;
&amp;lt;img
src="<a href="http://ad.doubleclick.net/ad/www.oracle.com/products/trial/html/trial.html" target=_blank>http://ad.doubleclick.net/ad/www.oracle.com/products/trial/html/trial.html</a>"
 width=468 height=60 border=0 ismap&amp;gt;&amp;lt;/a&amp;gt;

&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;!--end footer--&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

dev - in sub not_good
dev - in sub save_html
dev - %tebotize key
<a href="http://www.oracle.com/cgi-bin/press/printpr.cgi?file=199907191000.18885.html&mode=corp" target=_blank>http://www.oracle.com/cgi-bin/press/printpr.cgi?file=199907191000.18885.html&mode=corp</a>
given value 5.tbt
dev - in sub extract_hyperlinks
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/ebusiness/" target=_blank>http://www.oracle.com/ebusiness/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
mailto:<a href="https://searchlores.nickifaulk.com/ym/Compose?To=rbahnasy@us.oracle.com&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">rbahnasy@us.oracle.com</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
mailto:<a href="https://searchlores.nickifaulk.com/ym/Compose?To=kmcgee@appliedcom.com&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">kmcgee@appliedcom.com</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://technet.oracle.com/" target=_blank>http://technet.oracle.com/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>.).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/appserver/" target=_blank>http://www.oracle.com/appserver/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/html/sitemap.html" target=_blank>http://www.oracle.com/html/sitemap.html</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/html/siteidx_frame.html" target=_blank>http://www.oracle.com/html/siteidx_frame.html</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://orasearch.oracle.com/" target=_blank>http://orasearch.oracle.com/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://oraclestore.oracle.com/" target=_blank>http://oraclestore.oracle.com/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/download/" target=_blank>http://www.oracle.com/download/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/support/" target=_blank>http://www.oracle.com/support/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/cgi-bin/press/pr.cgi" target=_blank>http://www.oracle.com/cgi-bin/press/pr.cgi</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/corporate/seminars_and_events/" target=_blank>http://www.oracle.com/corporate/seminars_and_events/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/siteadmin/html/contactus.html" target=_blank>http://www.oracle.com/siteadmin/html/contactus.html</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/products/index.htm" target=_blank>http://www.oracle.com/products/index.htm</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/services/index.htm" target=_blank>http://www.oracle.com/services/index.htm</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/solutions/index.htm" target=_blank>http://www.oracle.com/solutions/index.htm</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://www.oracle.com/corporate/oracle_at_work/" target=_blank>http://www.oracle.com/corporate/oracle_at_work/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/partners/index.htm" target=_blank>http://www.oracle.com/partners/index.htm</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://technet.oracle.com/" target=_blank>http://technet.oracle.com/</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/corporate/index.htm" target=_blank>http://www.oracle.com/corporate/index.htm</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/international/html/" target=_blank>http://www.oracle.com/international/html/</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/html/employ.html" target=_blank>http://www.oracle.com/html/employ.html</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning null: (rejected
<a href="http://cnn.com/customnews" target=_blank>http://cnn.com/customnews</a>).
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/html/copyright.html" target=_blank>http://www.oracle.com/html/copyright.html</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://www.oracle.com/html/privacy.html" target=_blank>http://www.oracle.com/html/privacy.html</a>.
dev - in sub absolutise_url()
dev - absolutise_url() returning:
<a href="http://ad.doubleclick.net/jump/www.oracle.com/products/trial/html/trial.html" target=_blank>http://ad.doubleclick.net/jump/www.oracle.com/products/trial/html/trial.html</a>.
dev - in 'MAIN'calling get_html section
dev - in sub get_html()
dev - $url is
<a href="http://www.oracle.com/cgi-bin/press/printpr.cgi?file=199907130500.13306.html&mode=corp" target=_blank>http://www.oracle.com/cgi-bin/press/printpr.cgi?file=199907130500.13306.html&mode=corp</a>
From: <a href="https://searchlores.nickifaulk.com/ym/Compose?To=jclinton@whitehouse.gov&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">jclinton@whitehouse.gov</a>
Referer: <a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>
User-Agent: hcuBOT



dev - $response-&amp;gt;as_string is
HTTP/1.1 200 OK
Date: Thu, 20 Jul 1999 20:18:48 GMT
Server: Oracle_Web_Listener/4.0.7.1.0EnterpriseEdition
Allow: GET, POST
Content-Type: text/html
Client-Date: Thu, 20 Jul 1999 23:28:36 GMT
Client-Peer: 205.207.44.16:80
Title: Press Release

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Press
Release&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body bgcolor="#ffffff"&amp;gt;
&amp;lt;!--header--&amp;gt;
&amp;lt;table width=600 cellpadding=0 cellspacing=0
border=0&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td colspan=2 align=right&amp;gt;
dev - $request&amp;gt;as_string is
GET
<a href="http://www.oracle.com/cgi-bin/press/printpr.cgi?file=199907130500.13306.html&mode=corp" target=_blank>http://www.oracle.com/cgi-bin/press/printpr.cgi?file=199907130500.13306.html&mode=corp</a>
From: <a href="https://searchlores.nickifaulk.com/ym/Compose?To=jclinton@whitehouse.gov&amp;YY=52755&amp;order=down&amp;sort=date&amp;pos=0">jclinton@whitehouse.gov</a>
Referer: <a href="http://www.oracle.com/" target=_blank>http://www.oracle.com/</a>


</PRE>

<br><center><a href="bots.htm"><img SRC="https://searchlores.nickifaulk.com/images/botstart.gif"
ALT="bots" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=1
VSPACE=0
HSPACE=0></a><br><font color=gray>Back to the Bots section</FonT>
<br><bR></center><br>

<!-- FINAL NOTES STARTS HERE -->
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1"
WIDTH= "100%"  HEIGHT="20" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font
color=blue>Final Notes</fonT>
</fonT></center></td></tr></table>
<P>
Perl is not the only language to write bots.
<BR>
You can install Linux to your Windoze machine - you
know you want to.
<BR>
You could try something like this at altavista '+Perl
+tutorial'or '+Perl +robot
+tutorial'
<BR> I expect to update this page fairly soon with an
improved HCUbot.
<BR>
<P>
<center><font color=red size=+1>BOTS ARE THE
FUTURE</font></center>
<br><br>

<!-- OB DUH STARTS HERE -->
<!-- <TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1"
WIDTH= "100%"  HEIGHT="20" >
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font
color=blue>Ob Duh</fonT></fonT>
</center></td></tr></table> -->
 <center>
   <!-- <i>I wont even bother explaining you
   that you should BUY this target program if you
intend to use it for a longer
   period than the allowed one. Should you want
   to STEAL this software instead, you don't need to
crack its protection
   scheme at all: you'll
   find it on most Warez sites, complete and already
regged, farewell.</i>
</center> -->

<!-- WAY OUT STARTS HERE -->
<!-- how to search the web, by fravia+, signet begin -->
<table><tR><td width="300" height="2" bgcolor="#993300"></tD></tR></table>

(c) 1952-2032: <font color=blue>[</font><a href="info.htm">fravia+</a><font color=blue><font color=blue>]</fonT></font>, all rights reserved 
<bR><!-- how to search the web, by fravia+, signet end -->


<!-- begin da closing bit, duh -->


<!-- begin da closing bit, duh -->
</CENTER>
</body>
</HTML>
