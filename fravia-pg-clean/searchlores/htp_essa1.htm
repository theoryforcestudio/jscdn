<html>
<head>
<title>htp_essa1.htm: Fravia's "How to protect better" lab, essays</title>
</head>
<BODY bgcolor="#CCCCCC" TEXT=#001010 LINK=#0000FF ALINK=#00FF00 VLINK=#3366CC>
<center><H1>
<font color="#123456">How to 
protect better <font color="#654321">~</font> Essays</fonT></H1>
<a href="protec.htm"><IMG SRC="images/protec.gif" 
ALT="protec" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>
<br>
<font color=gray>Back to protec</FonT>
<br>

last update: <font color=blue>October</font> 2000<br><br>
Courtesy of Fravia's <a href="http://www.searchlores.org">Advanced searching lore</a>

<hr size=2><Font color=gray>
<Font size=+3>HOW TO PROTECT BETTER</FonT></fonT><br>
(The long road to defeat lamers & wannabie reversers)
<br><hr width=33%><Font size=+1>
Go to the <a href="htp_essa1.htm#mostre">most recent</a> essay</font>
<hr width=33%>
</center> 
<Font size=+1>

<br>PHASE 1 ~ 
<IMG SRC="images/bulletr.gif" 
ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 
VSPACE=0 HSPACE=0><a href="https://searchlores.nickifaulk.com/pro_rcg.htm">First attempt</a>, by +Rcg<br>
<hr width=33% ALIGN=LEFT>
PHASE 2 ~ 
<IMG SRC="images/bulletr.gif" 
ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 
VSPACE=0 HSPACE=0><a href="https://searchlores.nickifaulk.com/pro_syn.htm">Second attempt</a>, by +Sync<br>
<hr width=33% ALIGN=LEFT>
PHASE 3 ~ 
<IMG SRC="images/bulletr.gif" 
ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 
VSPACE=0 HSPACE=0><a href="https://searchlores.nickifaulk.com/piq.htm">The "Prefetch Instruction Queue" idea</a>, by Camel Eater, Aug 1997<br>
<hr width=33% ALIGN=LEFT>
PHASE 4 ~ 
<IMG SRC="images/bulletr.gif" 
ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 
VSPACE=0 HSPACE=0><a href="https://searchlores.nickifaulk.com/syncsol.htm">+Sync's second attempt solution</a>, by +Sync, Aug 1997<br>
<hr width=33% ALIGN=LEFT>
PHASE 5 ~ 
<IMG SRC="images/bulletr.gif" 
ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 
VSPACE=0 HSPACE=0><a href="https://searchlores.nickifaulk.com/heres004.htm">Prefetch Instruction 
Queue considerations</a>, by Heres, Sep 1997<br>
<hr width=33% ALIGN=LEFT>
PHASE 6 ~ 
<IMG SRC="images/bulletr.gif" 
ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 
VSPACE=0 HSPACE=0><a href="https://searchlores.nickifaulk.com/gnew1.htm">PIQ + Pentium, + some general protection thoughts for 
the HCU</a>, by g(ar), Nov 1997<br>
<a name="anchorsaga"></a>
<hr>
<center>PHASE 7 ~ 
<font size=+2>
<font color=red>+RCG's Self32 saga and beyond</font></fonT></fonT><br></fonT>
('course only for advanced crackers and advanced protectors :-)<br></center>
<br><font size=+1>
<IMG SRC="images/bulletr.gif" 
ALIGN=BOTTOM BORDER=0 VSPACE=0 
HSPACE=0><a href="https://searchlores.nickifaulk.com/self32.zip">self32.zip</a>, by +RCG, 29 Nov 1997... download 
icname.dat AND self32.exe and crack it!
<hr width=44%>
A <IMG SRC="images/bulletr.gif" 
ALIGN=BOTTOM BORDER=0 VSPACE=0 
HSPACE=0><a href="https://searchlores.nickifaulk.com/zero_rcg.htm">first answer</a>, by Zer0+ 
(December 1997)

<hr width=44%>
Enjoy +RCG's <IMG SRC="images/bulletr.gif" 
ALIGN=BOTTOM BORDER=0 VSPACE=0 
HSPACE=0><a href="https://searchlores.nickifaulk.com/sel32sol.htm">self32 solution!</a> 
<br>Here you have some tasty 
snippets out of it:</i><prE>
- Create a Self-Modificable code on the fly 
- modify VxD without restrictions
- if destination is a code segment then it is forbidden to write into it 
  and an exception is generated (and trapped... giving us the error code)
</prE><i>
<br><center>
The "self32 solution" link above is at the same time the road to +RCG's 
new protection approach and his two splendid essays:<br> 
<br> 
<font color= blue>CRYPTOGRAPHY AND MATHEMATICS OF CHAOS!</fonT>  
<br>and<br> 
<font color=blue>A FIRST INTRODUCTION TO VxD!</fonT> </center> 
<center><br>
In fact +RCG has opened a COMPLETELY NEW AND ADVANCED path with his two essays and with 
the accompaning programs and source code. Therefore I have decided to link them in 
an 'unusual' way, to filter lamers and newbyes a little and awaiting +RCG's updates and 
new promised goodies. He writes: "<font color=purple>Soon more (but you must work on 
your own)"</fonT> and he's right, of course. This is a WORK IN PROGRESS new section, 
that will -for obvious reasons- get along our new 1998 +HCU's project 
'Our tool' (API monitoring and vxd magic), which starts in these days on the 
ristrected maillist. So you better contribute (and I mean contribute with 
some interesting stuff) if you want to remain on this bandwagon... to cite +RCG's 
words:</center></i><prE><font color=purple>you must know that a VxD can do everything
we want, no more Ring3 restrictions, you can
stop completely the system, read or write any
memory address, hook all interrupts or exceptions,
take control of the IO ports</font></prE>

<hr>
<!-- AFTER SELF32 -->
<font size=+1>PHASE 8 ~ 
<IMG SRC="images/bulletr.gif" 
ALIGN=BOTTOM BORDER=0 VSPACE=0 
HSPACE=0><a href="https://searchlores.nickifaulk.com/flipvb1.htm">Flipper's Visual Basic 5 tough protection</a>, by +flipper, 
Dec 1997<br>(as the name says... tough 
Visual Basic 5 protection!)</i><br>
<br>
You'll find inside this same protection tutorial a couple of solutions as well:<br>
-----------------------------------------------------------------------------------<br>
The first solution, by <a href="https://searchlores.nickifaulk.com/flipvb1.htm#anchorroc">r0ketman</a> (December 1997) <bR>
and an <a href="https://searchlores.nickifaulk.com/flipvb1.htm#anchoransw">answer</a> by flipper (December 1997) <br>
and another solution, by <a href="https://searchlores.nickifaulk.com/flipvb1.htm#anchorrcg">+Rcg</a> (December 1997) <br>
and <a href="https://searchlores.nickifaulk.com/flipvb1.htm#anchor_2_answ">another answer</a> by flipper (26 December 1997) <br>
<br>
Average +HCU "deep" cracking time: three to five days :-)
<hr>
<font size=+1>
PHASE 9 ~ 
<IMG SRC="images/bulletr.gif" 
ALIGN=BOTTOM BORDER=0 VSPACE=0 
HSPACE=0><a href="https://searchlores.nickifaulk.com/snatfo.htm">Fooling Disassemblers (Protecting Applications Against Disassembly)</a>, 
by Snatch, Dec 1997<br>
<i>(The "non-conditional" conditional jump and other tricks)</i>
<hr width=33% ALIGN=LEFT>
PHASE A ~ 
<IMG SRC="images/bulletr.gif" 
ALIGN=BOTTOM BORDER=0 VSPACE=0 
HSPACE=0><a href="https://searchlores.nickifaulk.com/essaynb.htm">Advanced protection schemes</a>, 
by tibit, Dec 1997<br><i>(How to defeat us crackers at our own game :-)
</i><a name="anchorheav"></a>
<hr>PHASE B ~ 
<IMG SRC="images/bulletr.gif" 
ALIGN=BOTTOM BORDER=0 VSPACE=0 
HSPACE=0><a href="https://searchlores.nickifaulk.com/heavy.zip">+RCG's heavy protection</a>, 
by +RCG, Jan 1998 
<br><br></fonT>
C'mon, everyone: crack the vxd based protection scheme of this <font color=red>official HCU protector 
program</fonT>!<hr width=33%>
Here is what +RCG himself writes 
about all this<pre><font color=purple>BTW, this doc will teach you to protect, and I will also
attach "the official HCU protector program" and then we
will wait for someone able to reverse it.
Don't worry: I will explain you how it works (I will attach 
the source as well, yet this won't help you too much from
a cracking point of view).</fonT></pre><center><i>See above the Self32 saga in order to read +RCG's new  
<font color=blue>CRYPTOGRAPHY AND MATHEMATICS OF CHAOS</fonT> 
and <font color=blue>A FIRST INTRODUCTION TO VxD</fonT> essays! </center></i>
<a name="anchorquin"></a>
<hr width=22%><center><font size=+2>
<font color=red>Quine's Quick Qrack</fonT></fonT></center>
And on 15 January 1998 -a day after having released +RCG's heavy protection- I 
have already received a 
quick solution by nothing less than Quine. +RCG, my friend, I believe we will have 
to start to 
prepare "specific" protections against +HCUkers... the 
only question is: how?<prE><font color=purple>fravia+,

	In taking a break from putting the finishing touches on my HASP
essay (!), I took a look at +RCG's heavy.exe.  It was quite interesting
because his method has weaknesses that are similar to those I found
with the hasp encryption.  The solution, by the way, is to create a
10h byte long file called key.dat which contains 00h through 0Fh.  The
key, as +RCG tells us is too easy, but even with a completely random
key of 10h bytes it would have taken about 2 minutes to find it.  I'm
not going to explain how I figured out that it was a 10h byte string
xor'd with the code from 4012B9h to 401300h because it's fairly easy
to figure that out.  Here's how to find the key.  Isolate the
encrypted bytes in their own file, load that file in HexWorkshop, and
print it out.  You Should have something that looks like this:

00000000 6A31 6A51 2545 066D 08E1 A30A 0C0D 66F7
00000010 2041 02FC 710D EEFD 0809 0AB5 B51F 4E0F
00000020 8934 5223 4405 B906 1B49 0A20 F284 3343
00000030 2041 02BD 6025 4607 813C 422B 4C0D C90A
00000040 4421 4203 0B05 0607

Isn't it convenient how it's lined up so that the first byte of the
key is xor'd with the first byte in each of the rows, and so on with
the second, third, ....  I will refer to bytes in the grid above by
their row and column using hexadecimal and starting with 0.  So, (0,0)
is the first byte and (4,7) is the last.  Ok, here's the weakness of
+RCG's method:  he left the relocation table untouched and there are 9
relocations within the encrypted code.  A relocation entails a four
byte absolute address, usually into the data section.  IDA, to make
things convenient, tells us where these relocations are after we make
the encrypted code undefined.  We know that these addresses will start
with at least 0040 and most of them with 004020 (since that's where
the data section is).  The addresses are at: (0,0), (0,f), (1,c),
(2,2), (2,7), (2,f), (3,4), (3,a), (4,0).  Even if we assume only that
they all start with 0040, that means that we can deduce all but bytes
0, 3, 8, and b of the key right off the bat.  Working on the 004020
assumption (which is correct in all but one case) we can deduce
everything except for byte 8 (needless to say, I had seen the pattern
way before this, but I wanted to explain how it would work for any
key).  However, since we know everything else at this point it would
be fairly simple work to deduce byte 8.  I address a lot of issues
related to this in the hasp essay (they use a 1000h byte long string
for xor'ing) and suggest a more airtight protection method.

P.S.  A further consequence of +RCG's neglect of relocations is that
the program will crash if it is ever relocated by the operating
system.  This is not bound to happen to an exe, but it is extremely
likely with a dll, in which case the operating system will start
adding values to bytes within the encrypted code and that will lead to
an inevitable crash.

Later,
Quine</fonT></prE><a name="anchorboat"></a>
<hr width=33%><center><font size=+2><font color=red>
January 1998<bR></fonT></fonT></center>
Of course things do NOT finish here... and +RCG has sent some new 
(and very interesting) protection ideas... I'm sure that you'll find 
the short essay by +RCG: <a href="https://searchlores.nickifaulk.com/rcg_vxd2.htm">HOW TO PROTECT SOFTWARE 
BETTER - Part II</a> very instructive. It deals, among other things, with  the 
following questions: Purpose of the "Our protection" section; 
The "delayed" protection scheme of the future; 
The Port 70/71 trick; 
<font color=blue>How to take Softice on a boat ride</fonT>; 
Softice breakpoint magic explained and defeated.

<bR>
<hr width=33%><center><font size=+2><font color=red>
February 1998<bR></fonT></fonT>
A tough assembly protection: <a href="https://searchlores.nickifaulk.com/crack_me.htm">crack_me.htm</a><br>
by +Aesculapius <br>
A beautiful, great contribution by +Aesculapius, who gathers some ideas from 
Madmax's letters (see below) and has prepared for you a real 
"cake": <a href="https://searchlores.nickifaulk.com/aescul.zip">aescul.zip</a> ready? steady? Go!
</center>


<bR>
<hr width=33%><center><font size=+2><font color=red>
February 1998<bR></fonT></fonT>
<a href="https://searchlores.nickifaulk.com/jackrev.htm">jackrev.htm</a>: Reversing +Aesculapius, A <b>complete</b> 
explanation of a very good assembler protection<br>
by Jack of Shadows<br><font color=purple>
A beautiful, great solution by Jack of Shadows!</fonT>
</center>

<bR>
<hr width=33%><center><font size=+2><font color=red>
March 1998<bR></fonT></fonT>
<a href="https://searchlores.nickifaulk.com/aescures.htm">aescures.htm</a>: +Aesculapius' <b>Answer</b> 
to Jack of Shadows and +Seniors<br><font color=purple>
Lotta important things for protectors and crackers alike!</font>
</center>


<bR>
<hr width=33%><center><font size=+2><font color=red>
March 1998<bR></fonT></fonT>
<a href="https://searchlores.nickifaulk.com/zelazny.zip">zelazny.zip</a>: Jack of Shadows <b>Answer</b>: 
a modified 'Aesculapius_type' advanced protection<br><font color=purple>
Is getting hot interesting for protectors and crackers alike!</font>
</center>
<br><br>

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" HEIGHT="22" WIDTH="720">

 <tr>
    <td width="75">July 98</td>
    <td width="89">Miguel Neto </td>
    <td width="9">~</td>
    <td width="83"><a href="https://searchlores.nickifaulk.com/neto_01.htm">neto_01.htm</a> </td>
    <td width="328">How to crack another commercial &quot;ready made&quot; protection </td>
    <td VALIGN="center" width="64"><a HREF="https://searchlores.nickifaulk.com/timelock.htm">timelock</a>
<a HREF="protec.htm">protec</a></td>
    <td width="9">~</td>
    <td width="75">fra_0143</td>
  </tr>

<tr>
    <td width="75">Nov 98</td>
    <td width="89">NiKoDeMoS</td>
    <td width="9">~</td>
    <td width="83"><a href="https://searchlores.nickifaulk.com/jn_essay.htm">jn_essay.htm</a> </td>
    <td width="328">The New Chaos Protection</td>
    <td VALIGN="center"><a HREF="protec.htm">protec</a></td>
    <td width="9">~</td>
    <td width="75">fra_0168</td>
  </tr>
<tr>
    <td width="75">Dec 98</td>
    <td width="89">Tomboy</td>
    <td width="9">~</td>
    <td width="83"><a href="https://searchlores.nickifaulk.com/everlock.htm" tppabs="http://fravia.net/everlock.htm">everlock.htm</a> </td>
    <td width="328">Everlock by Az-Tech: Reversing a Commercial
Copy Protection Scheme - Part 1</td>
    <td VALIGN="center" bgcolor="#FF7F21" width="64">
<a href="advanced.htm" tppabs="http://fravia.net/advanced.htm">advanced</a>
<a HREF="protec.htm">protec</a></td>
    <td width="9">~</td>
    <td width="75">fra_0176</td>
  </tr>
<tr>
    <td width="75">Jan 99</td>
    <td width="89">Svd</td>
    <td width="9">~</td>
    <td width="83"><a href="https://searchlores.nickifaulk.com/svdcd1.htm" tppabs="http://fravia.net/svdcd1.htm">svdcd1.htm</a></td>
    <td width="328"> "offline" debugging and other little marvels</td>
<td VALIGN="center"width="64"><a HREF="protec.htm">protec</a></td>
<td width="9">~</td>   
    <td width="75">fra_017C</td>
  </tr>

<tr>
    <td width="75">Jan 99</td>
    <td width="89">Pilgrim</td>
    <td width="9">~</td>
    <td width="83"><a href="https://searchlores.nickifaulk.com/pilgrim2.htm" tppabs="http://fravia.net/pilgrim2.htm">pilgrim2.htm</a></td>
    <td width="328">Further FlexCrypt analysis</td>
<td VALIGN="center"width="64"><a HREF="protec.htm">protec</a></td>
<td width="9">~</td>   
    <td width="75">fra_017E</td>
  </tr>
<tr>
    <td width="75">Jan 99</td>
    <td width="89">Indian1998+</td>
    <td width="9">~</td>
    <td width="83"><a href="https://searchlores.nickifaulk.com/india_r1.htm" tppabs="http://fravia.net/india_r1.htm">india_r1.htm</a></td>
    <td width="328">Cracking a Commercial Time Trial Protection using Wdasm32 as debugger</td>
<td VALIGN="center"width="64"><a HREF="protec.htm">protec</a></td>
<td width="9">~</td>   
    <td width="75">fra_017F</td>
  </tr>
<tr>
    <td width="75">Jan 99</td>
    <td width="89">+puarc</td>
    <td width="9">~</td>
    <td width="83"><a href="https://searchlores.nickifaulk.com/probet_1.htm" tppabs="http://fravia.net/probet_1.htm">probet_1.htm</a></td>
    <td width="328">Protection Techniques (1): How to protect your C programs</td>
<td VALIGN="center"width="64"><a HREF="protec.htm">protec</a></td>
<td width="9">~</td>   
    <td width="75">fra_0180</td>
  </tr>



<tr>
    <td width="75">Jan 99</td>
    <td width="89">McLallo</td>
    <td width="9">~</td>
    <td width="83"><a href="https://searchlores.nickifaulk.com/cdromcla.htm" tppabs="http://fravia.net/cdromcla.htm">cdromcla.htm</a></td>
    <td width="328">CD-Cops ~ Another ready-made protection annihilated</td>
<td VALIGN="center" bgcolor="#FF7F21" 
width="64"><a href="https://searchlores.nickifaulk.com/advanceds.htm" tppabs="http://fravia.net/advanceds.htm">advanced</a><br><a HREF="https://searchlores.nickifaulk.com/project4.htm" tppabs="http://fravia.net/project4.htm">proj 4</a>
<a HREF="protec.htm">protec</a>
</td>
<td width="9">~</td>   
    <td width="75">fra_0183</td>
  </tr>


<tr>
    <td width="75">July 99</td>
    <td width="89">Black Check</td>
    <td width="9">~</td>
    <td width="83"><a href="https://searchlores.nickifaulk.com/blackche.htm">C-Dilla Safedisc</a></td>
    <td width="328">Another comercial Protection defeated</td>
<td VALIGN="center" bgcolor="#FF7F21" 
width="64"><a href="advanced.htm">advanced</a></td>
<td width="9">~</td>   
    <td width="75">****</td>
  </tr>

<!-- INSERT HERE -->
</table>


<bR>
<hr width=33%><center><font size=+2><font color=red>
July 1999<bR></fonT></fonT>
<a href="https://searchlores.nickifaulk.com/antiwa1.htm">antiwa1.htm</a>: Rob's <b>views on software protection</b>: 
a game of lesser and lesser
returns for time invested.<bR>
There are always going to be those with more time on
their hands than you
have, who crack it
</center>
<br><br>

<hr width=33%><center><font size=+2><font color=red>
May 2000<bR></fonT></fonT>
<a href="https://searchlores.nickifaulk.com/lazatips.htm">lazatips.htm</a>: LaZaRuS Anti-Cracking
Tips V2.0 (in German)<bR>
Um gute Schutzalgorhythmen zu schreiben, sollte man m&ouml;glichst
viel &uuml;ber die Vorgehensweise von Crackern wissen
</center>
<br><br>



<hr width=33%><center><font size=+2><font color=red>
September 2000<bR></fonT></fonT>
<a href="https://searchlores.nickifaulk.com/rose_a_d.txt">rose_a_d.txt</a>: ROSE's  AntiDebugger  F A Q<bR>
This text/directory contains information on how to stop a debugger from
    single stepping through your program.
</center>
<br><br>

<!-- ***************** -->
<!-- MOST RECENT ESSAY -->
<!-- move these lines! -->
<a name="mostre"></a>
<!-- ***************** -->
<hr width=33%><center><font size=+2><font color=red>
October 2000<bR></fonT></fonT>
<a href="cesa_lat.htm">cesa_lat.htm</a>: Silvio CESARE's "linux antidebugging techniques"<bR>
false disassembly,
detecting breakpoints,
setting up false breakpoints,
detecting debugging
</center>
<br><br>
<pre>












</prE>
<hr size=3>
<center>
<a href="protec.htm"><IMG SRC="images/protec.gif"  
ALT="protec" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>
<br>
<font color=gray>Back to protec</FonT>
<br><bR></center>
</fonT></font><center>
<Font color=green>
(c) <a href="info.htm">Fravia</a>, 
1995, 1996, 1997, 1998, 1999, 2000 <font color="#654321">~</font> All rights reserved</font>

<hr>
This project was started in May 1997 and was ported to <a href="http://www.searchlores.org">searchlores.org</a> in March 2000<br>

</body>
</html>